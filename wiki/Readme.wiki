#summary top-level readme doc
#labels Featured,Version-2.6.1.4

TURN(15 Aug 2013)	

== GENERAL INFORMATION ==

       The  *TURN Server* project contains the source code of a TURN server and
       TURN client messaging library. Also, some extra programs	provided,  for
       testing-only purposes.

       See the INSTALL file for	the building instructions.

       After the build,	you will have the following binary images:

 *     _*turnserver*_:  *TURN Server* relay. The compiled binary image of this program is located in bin/ sub-directory.
 *     _*turnadmin*_: TURN administration tool. This tool can be used for:
   # generation	of TURN keys for the user accounts. For security reasons, we do not recommend storing passwords openly. The better	option is to use pre-processed "keys" which are then used for authentication. These keys are generated by _turnadmin_.
   # listing available users in flat file, or in databases.
   # adding and deleting users in the flat file or in the databases.
   # updating user passwords. 
   # setting shared secret for TURN REST API.
 *     _*turnutils_uclient*_: emulates multiple UDP,TCP,TLS or DTLS  clients. The compiled binary image of this program is located in bin/ sub-directory.
{{{
       WARNING:	the turnutils_uclient program is a primitive client application and 
       is provided for test-only purposes.  
       It does not implement the re-transmission pattern that is necessary for a
       correct	TURN client implementation. In TURN, the retransmission	burden
       is lying	almost entirely on the	client application. We provide	the  messaging
       functionality  in the client library, but the client must implement the
       correct Networking IO processing	in the client program code.
}}}
 *	_*turnutils_peer*_: a simple stateless UDP-only "echo" server, to be used as the final server in relay pattern ("_peer_"). For every incoming UDP packet, it simply echoes it back.  (this program is provided for the testing purposes only !)	When the test clients are communicating in the	client-to-client manner, this component	is not needed. The compiled binary image of this program is located in bin/ subdirectory.
 *	_*turnutils_stunclient*_: a simple STUN	client example that implements RFC 5389 and RFC 5780.	 The  compiled	binary image of this program is located in bin/ subdirectory.
 *	_*turnutils_rfc5769check*_: a utility that checks the correctness of the STUN/TURN protocol implementation. This program will perform several checks and print the result on the screen. It will exit with 0 status if everything is OK, and with (-1) if there was an error in the protocol implementation.   

       In the "examples/scripts"	subdirectory, you will find the	 examples  of  command
       lines to	be used	to run the programs. The scripts are meant to be run from examples/ subdirectory, for example:
{{{
	$ cd examples
	$ ./scripts/longtermsecure/secure_relay.sh
}}}

== RUN ==

===turnserver application: a TURN relay server implementation===

====Usage:====
{{{
       $ turnserver [flags] [-n | -c <config-file>] [ --userdb=<userdb-file> | --psql-userdb=<db-conn-string> | --mysql-userdb=<db-conn-string> ] [options]
       $ turnserver -h
}}}

[http://code.google.com/p/rfc5766-turn-server/wiki/turnserver TURNSERVER WIKI PAGE]

=== turnadmin application: a TURN relay administration tool===

====Usage:====
{{{
       $ turnadmin [command] [options]
       $ turnadmin [ -h	| --help]
}}}

[http://code.google.com/p/rfc5766-turn-server/wiki/turnadmin TURNADMIN WIKI PAGE]

=== turnutils_uclient application (for test purposes only)===
  It was designed to simulate multiple clients. It uses asynch IO API in  libevent to  handle  multiple  clients. A  client connects to the relay, negotiates the session, and sends	multiple  (configured  number) messages	to  the	 server	 (relay), expecting the	same number of replies. The length of the messages is configurable.   The  message is an arbitrary octet stream, but it	can be configured as a string.  The number of the messages to send is configurable.

====Usage:====
{{{
       $ turnutils_uclient [-tSvsyhcxg] [options]	<TURN-Server-IP-address>
}}}

[http://code.google.com/p/rfc5766-turn-server/wiki/turnutils_uclient UCLIENT WIKI PAGE]

=== turnutils_peer  application (for test purposes ony) ===
turnutils_peer is a simple UDP-only echo backend server. This application is used for the test purposes only, as a '_peer_'  for the _turnutils_uclient_ application.

====Usage:====
{{{
       $ turnutils_peer [-v] [options]
}}}

[http://code.google.com/p/rfc5766-turn-server/wiki/turnutils_peer PEER WIKI PAGE]

=== turnutils_stunclient is a basic STUN client ===
It sends a STUN request and shows the reply information.

====Usage:====
{{{
       $ turnutils_stunclient [options] <STUN-Server-IP-address>
}}}

[http://code.google.com/p/rfc5766-turn-server/wiki/turnutils_stunclient STUNCLIENT WIKI PAGE]

=== turnutils_rfc5769check tests the correctness of STUN protocol ===
It tests the protocol implementation against the test vectors predefined in RFC 5769 and prints the results of the tests on the screen.   
  
====Usage:====  
{{{
$ turnutils_rfc5769check
}}}

[http://code.google.com/p/rfc5766-turn-server/wiki/turnutils_rfc5769check PROTOCOL CHECK UTILITY WIKI PAGE]


== LIBRARIES ==

       In the lib/ sub-directory the build process  will  create  TURN	client
       messaging  library.   In	 the  include/	sub-directory,	the  necessary
       include files will be placed. 
       The C++ wrapper for the messaging functionality is located in TurnMsgLib.h header.
       An example of C++ code can be found in stunclient.c file.

== DOCS ==

In the original archive tree, the command:

	$ man -M man turnserver

will give you the man page.

After the proper installation, the command:

	$ man turnserver
	
will give you the same man page.

In the docs/html subdirectory of the original archive tree, you will find the client library 
reference. After the installation, it will be placed in 
PREFIX/share/doc/turnserver/html.
 
== LOGS ==

When the *TURN Server* starts, it makes efforts to create a log file {{{turnserver_<pid>.log}}} 
in the following directories:

	* /var/log
	* /log/
	* /var/tmp
	* /tmp
	* current directory

If all efforts failed (due to the system permission settings) then all 
log messages are sent only to the standard output of the process.

This behavior can be controlled by --log-file and --no-stdout-log options (see turnserver help).

== CLUSTERS ==

TURN Server can be a part of the cluster installation. But, to support the "even port" functionality 
(RTP/RTCP streams pairs) the client requests from a particular IP must be delivered to the same 
TURN Server instance, so it requires some networking setup massaging for the cluster. The reason is that 
the RTP and RTCP relaying endpoints must be allocated on the same relay IP. It would be possible 
to design a scheme with the application-level requests forwarding (and we may do that later) but 
it would affect the performance.

== Performance tuning ==

The TURN Server performance depends on how efficiently the operational system
handles the TCP/IP stack. Usually, the TCP part of it is properly optimized, 
but the UDP handling is often suboptimal - so far, a typical UDP stack 
implementation is not very well tuned for the "persistent" UDP sessions like 
ones used in TURN. For example, by default the Linux kernel hashes all UDP 
sockets in just 128 buckets; if you have thousands UDP sessions then you have 
lots of UDP sockets which are handled inefficiently. 

In other words, the implementation of UDP in the Linux kernel makes use a 
hash table to store socket structures. In kernel 2.6.32 (default in CentOS 6,
for example) this hash table is hardcoded to have 128 entries. So with a
large number of sockets, the performance of the table degrades to a linked
list which must be traversed for each incoming packet. 

If you have a Linux kernel <=2.6.32 then you can change the hardcoded hash 
size in the kernel code and re-compile the kernel. If you have a more recent
kernel then you can do that without kernel recompilation. Kernel 2.6.33 
introduced a configurable UDP hash table size, and a second UDP hash table,
keyed by IP+port (previous to this it was only by port). You can configure
the hash table size by setting the "uhash_entries" boot-time kernel variable
(for example, in /etc/grub.conf). For best performance, set it to 65536.
 
Other OSs have similar issues. Check documentation to your OS for 
configuration instructions.

The TURN Server is designed as a multi-threaded network packets routing 
system. But multi-threading is not always the best option for a particular
system configuration. The default start-up TURN Server configuration is a
compromise between memory, thread affinity, cache and CPU resources, and
between TCP and UDP typical "vanilla" OS networking stack implementations.
This is not a specialised system tuned for a very particular hardware, 
a particular OS or a particular load pattern. The TURN Server design is 
tuned for very wide range of possible applications, so it may not be 
100% most optimal for a particular application. But it must be good enough
to be usable everywhere. 
  
The TURN server parameter -m allows tuning of the threading configuration. 
You can turn off the multi-threading by using "-m 0" parameter 
(or "--relay-threads=0"). It will keep all network packets processing within
one thread, eliminating context switch etc - it may be a more efficient 
option for your system. There still will be a separate authentication thread
because the authentication process must not be holding the normalpackets 
routing.

You can use "-m 0" option and run multiple TURN servers on your system, one 
per CPU core. That would be probably the best performance option in terms of 
scalability. Each TURN server must have its own network listening address and
its own relay IP and/or relay ports range - so the configuration will be
complicated - but the performance will be the best possible. You can use 
ALTERNATE-SERVER mechanism to present the whole "pack" as a single "initial"
TURN server front-end to the external world.

== FILES ==

/etc/turnserver.conf

/etc/turnuserdb.conf

/usr/local/etc/turnserver.conf

/usr/local/etc/turnuserdb.conf

== STANDARDS ==

classic STUN RFC 3489

new STUN RFC 5389

TURN RFC 5766

TURN-TCP extension RFC 6062
 
TURN IPv6 extension RFC 6156

STUN/TURN test vectors RFC 5769

STUN NAT behavior discovery RFC 5780

A REST API For Access To TURN Services draft-uberti-behave-turn-rest-00

== WEB RESOURCES ==

project page: http://code.google.com/p/rfc5766-turn-server/

forum: https://groups.google.com/forum/?fromgroups=#!forum/turn-server-project-rfc5766-turn-server/

== AUTHORS ==

Oleg Moskalenko <mom040267@gmail.com>
	design, coding

Gabor Kovesdan, http://kovesdan.org :
	FreeBSD packaging
	(since v1.5.2.6);
	
Daniel Pocock, http://danielpocock.com :
	Debian packaging
	(since v1.8.3.6);
	
John Selbie (jselbie) :
	Stuntman interoperability, RFC5780 fixes 
	(since v1.8.3.6);
	
Lee Sylvester <lee@designrealm.co.uk> :
	Status and statistics - ideas and pilot implementation
	(since v1.8.4.0);

Erik Johnston <erikj@openmarket.com> :
	Access Control Lists, 2013 
	(since v1.8.5.0);

Roman Lisagor <roman@demonware.net> :
	Testing, code optimization
	(since v1.8.6.0);

Vladimir Tsanev <tsachev@gmail.com> :
	configure script and Makefile fixes,
	Arch Linux port
	(since v1.8.6.1);

Po-sheng Lin <personlin118@gmail.com> :
        Libevent dependencies cleaning
        (since v2.0.1.1);

						TURN(15 Aug 2013)
GENERAL INFORMATION

The TURN Server project contains the source code of a TURN server and TURN client 
messaging library. Also, some extra programs provided, for testing-only 
purposes. 

See the INSTALL file for the building instructions.

After the build, you will have the following binary images:

1.	turnserver: TURN Server relay. 
The compiled binary image of the TURN Server program is located in bin/ sub-directory.

2.	turnadmin: TURN administration tool. See README.turnadmin and turnadmin man page.
  
3.	turnutils_uclient. See README.turnutils and turnutils man page.

4.	turnutils_peer. See README.turnutils and turnutils man page.
   
5.	turnutils_stunclient. See README.turnutils and turnutils man page.
  
6.	turnutils_rfc5769check. See README.turnutils and turnutils man page.

In the "examples/scripts" subdirectory, you will find the examples of command lines to be used 
to run the programs. The scripts are meant to be run from examples/ subdirectory, for example:

$ cd examples
$ ./scripts/secure_relay.sh
  
RUNNING THE TURN SERVER

Options note: turnserver has long and short option names, for most options.
Some options have only long form, some options have only short form. Their syntax 
somewhat different, if an argument is required:

The short form must be used as this (for example):

  $ turnserver -L 12.34.56.78
  
The long form equivalent must use the "=" character:

  $ turnserver --listening-ip=12.34.56.78
  
If this is a flag option (no argument required) then their usage are the same, for example:

 $ turnserver -a
 
is equivalent to:

 $ turnserver --lt-cred-mech
  
===============================================================================

  NAME
  
turnserver application is a TURN relay server implementation.
  
  SYNOPSIS
  
$ turnserver [-n | -c <config-file> ] [flags] [ --userdb=<userdb-file> | --psql-userdb=<db-conn-string> | --mysql-userdb=<db-conn-string> ] [-z | --no-auth | -a | --lt-cred-mech ] [options]
$ turnserver -h
  
  DESCRIPTION						
  
Config file settings:  

-n		Do not use configuration file, use only command line parameters.

-c		Configuration file name (default - turnserver.conf).
		The format of config file can be seen in
		the supplied examples/etc/turnserver.conf example file. Long 
		names of the options are used as the configuration 
		items names in the file. If not an absolute path is supplied, 
		then the file is searched in the following directories: 
		  * current directory
		  * current directory etc/ subdirectory
		  * upper directory level etc/
		  * /etc/ 
		  * /usr/local/etc/
		  * installation directory /etc

User database settings:  

-b, --userdb	'Dynamic' user database file name (default - turnuserdb.conf),
		for long-term credentials mechanism only.
		This user file database is being dynamically checked while the turnserver 
		is working, and the user accounts can be changed dynamically by
		editing the database.
				  
-e, --psql-userdb User database connection string for PostgreSQL.
		This database can be used for long-term and short-term credentials mechanisms,
		and it can store the secret value for secret-based timed authentication in TURN RESP API.
		The connection string format is like that:
		 
		"host=<host> dbname=<dbname> user=<db-user> password=<db-user-password> connect_timeout=<seconds>" 
		(for 8.x or newer Postgres).
		
		Or:
		
		"postgresql://username:password@hostname:port/databasename" (for 9.x or newer Postgres). 
		See the INSTALL file for more explanations and examples.
		
		Also, see http://www.PostgreSQL.org for full PostgreSQL documentation.
				  
-M, --mysql-userdb	User database connection string for MySQL. 
		This database can be used for long-term and short-term credentials mechanisms,
		and it can store the secret value for secret-based timed authentication in TURN RESP API.
		The connection string format is like that:
		 
		"host=<host> dbname=<dbname> user=<db-user> password=<db-user-password> connect_timeout=<seconds>"
		See the INSTALL file for more explanations and examples.
		
		Also, see http://www.mysql.org for full MySQL documentation.

Flags:   

-v, --verbose		'Moderate' verbose mode.

-V, --Verbose		'Extra' verbose mode, very annoying and not recommended.

-o, --daemon		Run server as daemon.

-f, --fingerprint	Use fingerprints in the TURN messages. If an incoming request
			contains fingerprint, then TURN server will always add 
			fingerprints to the messages in this session, regardless of the
			per-server setting.

-a, --lt-cred-mech	Use long-term credentials mechanism (this one you need for WebRTC usage). 
					This option can be used with either flat file user database or 
					PostgreSQL DB or MySQL DB for user keys storage.
-A, --st-cred-mech	Use the short-term credentials mechanism. This option requires
	                a PostgreSQL or MySQL DB for short term passwords storage.

-z, --no-auth		Do not use any credentials mechanism, allow anonymous access. 
			Opposite to -a and -A options. This is default option when no 
			authentication-related options are set.
			By default, no credential mechanism is used -
			any user is allowed.

--use-auth-secret	Flag that sets a special WebRTC authorization option 
			that is based upon authentication secret. This feature purpose 
			is to support "TURN Server REST API" as described in
			TURNServerRESTAPI.pdf in the docs.
			This option uses timestamp as part of combined username:
			usercombo -> "user_id:timestamp",
			turn user -> usercombo,
			turn password -> base64(hmac(secret key, usercombo)).
			This allows TURN credentials to be accounted for a specific user id.
			If you don't have a suitable id, the timestamp alone can be used.
			This option is just turns on secret-based authentication.
			The actual value of the secret is defined either by option static-auth-secret,
			or can be found in the turn_secret table in the database.
			This option can be used with long-term credentials mechanisms only -
			it does not make much sense with the short-term mechanism.

--no-udp		Do not start UDP client listeners.

--no-tcp		Do not start TCP client listeners.

--no-tls		Do not start TLS client listeners.

--no-dtls		Do not start DTLS client listeners.

--no-udp-relay		Do not allow UDP relay endpoints, use only TCP relay option.

--no-tcp-relay		Do not allow TCP relay endpoints, use only UDP relay option.

--stale-nonce		Use extra security with nonce value having limited lifetime (600 secs). 

--no-stdout-log		Flag to prevent stdout log messages.
			By default, all log messages are going to both stdout and to
			a log file. With this option everything will be going to the log file only
			(unless the log file itself is stdout).

-h				Help.
    
Options with required values:  

-d, --listening-device		Listener interface device (optional functionality, Linux only). 
				The turnserver process must have root privileges to bind the 
				listening endpoint to a device. If turnserver must run as a 
				process without root privileges, then just do not use this setting.

-L, --listening-ip		Listener IP address of relay server. 
				Multiple listeners can be specified:
				... -L ip1 -L ip2 -L ip3..."
				If no IP(s) specified, then all IPv4 and 
				IPv6 system IPs will be used for listening.
				The same ip(s) can be used as both listening and relay ip(s).

-p, --listening-port		TURN listener port for UDP and TCP listeners (Default: 3478).

--tls-listening-port		TURN listener port for TLS and DTLS listeners (Default: 5349).

--alt-listening-port		Alternative listening port for UDP and TCP listeners
				(default value is 3479). This is needed for RFC 5780 support
				(STUN extension specs, NAT behavior discovery). The TURN Server 
				supports RFC 5780 only if it is started with more than one 
				listening IP address of the same family (IPv4 or IPv6).
							 
--alt-tls-listening-port	Alternative listening port for TLS and DTLS protocols.
				Default value is 5350.

-i, --relay-device		Relay interface device for relay sockets 
				(optional, Linux only).

-E, --relay-ip			Relay address (the local IP address that 
				will be used to relay the packets to the 
				peer). Multiple relay addresses may be used:
				... -E ip1 -E ip2 -E ip3 ...
				If no relay IP(s) specified, then all 
				non-loopback system IPs will be used.
				The same ip(s) can be used as both listening and relay ip(s).

-X, --external-ip		"External" TURN Server address if the server is behind NAT.
				In the server-behind-NAT situation, only one relay address must be used, and
				that single relay address must be mapped by NAT to the 'external' IP.
				For this 'external' IP, NAT must forward ports directly (relayed port 12345
				must be always mapped to the same 'external' port 12345).
				This value, if not empty, is returned in XOR-RELAYED-ADDRESS field.
				By default, this value is empty, and the real relay IP address is used.
				
-m, --relay-threads		Number of relay threads to handle the established connections
				(in addition to authentication thread and the listener thread).
				If set to 0 then application runs in single-threaded mode.
				The default thread number is the number of CPUs.

--min-port			Lower bound of the UDP port range for relay 
				endpoints allocation.
				Default value is 49152, according to RFC 5766.

--max-port			Upper bound of the UDP port range for relay 
				endpoints allocation.
				Default value is 65535, according to RFC 5766.

-u, --user			Long-term credentials user account, in the column-separated 
				form 'username:key'. 
				Multiple user accounts may used in the command line.
				The key is either the user password, or
				the key is generated
				by turnadmin command. In the second case,
				the key must be prepended with '0x' symbols.
				The key is calculated over the user name, 
				the realm, and the user password.

-r, --realm			Realm to be used for all users, with long-term credentials only

-q, --user-quota		Per-user allocations quota: how many concurrent 
				allocations a user can create.

-Q, --total-quota		Total allocations quota: global limit on concurrent allocations.

--static-auth-secret	Static authentication secret value (a string).
				If not set, then the turn server will try to use the 'dynamic' value 
				in turn_secret table in user database (if present). The database-stored
				value can be changed on-the-fly by a separate program, so this is why 
				that other mode is 'dynamic'.

--secret-ts-exp-time	Expiration time for timestamp used with authentication secret, in seconds.
				The default value is 86400 (24 hours).
				This is 'TTL' in terms of TURNServerRESTAPI.pdf document.

-s, --max-bps			Max bytes-per-second bandwidth a TURN session is allowed to handle
				(input and output network streams combined). Anything above that limit
				will be dropped.

--cert				Certificate file, PEM format. Same file 
				search rules applied as for the configuration 
				file. If both --no-tls and --no-dtls options 
				are specified, then this parameter is not needed.
				Default value is turn_server_cert.pem.

--pkey		     		Private key file, PEM format. Same file 
				search rules applied as for the configuration 
				file. If both --no-tls and --no-dtls options 
				are specified, then this parameter is not needed.
				Default value is turn_server_pkey.pem.
				
-l, --log-file	Option to set the log file name.
				By default, the turnserver tries to open a log file in 
				/var/log, /var/tmp, /tmp and current directories directories
				(which open operation succeeds first that file will be used).
				With this option you can set the definite log file name.
				The special names are "stdout" and "-" - they will force everything 
				to the stdout.

===============================================================================

LIBRARIES

In the lib/ sub-directory the build process will create TURN client messaging library.
In the include/ sub-directory, the necessary include files will be placed.
The C++ wrapper for the messaging functionality is located in TurnMsgLib.h header.
An example of C++ code can be found in stunclient.c file. 

===================================================================================
 
DOCS

After installation, run the command:

$ man turnserver

or in the project root directory:

$ man -M man turnserver

to see the man page.

In the docs/html subdirectory of the original archive tree, you will find the client library 
reference. After the installation, it will be placed in PREFIX/share/doc/turnserver/html.

===================================================================================

LOGS

When the TURN Server starts, it makes efforts to create a log file turn_<pid>.log 
in the following directories:

	* /var/log
	* /log/
	* /var/tmp
	* /tmp
	* current directory

If all efforts failed (due to the system permission settings) then all 
log messages are sent only to the standard output of the process.

This behavior can be controlled by --sql-log and --no-stdout-log options (see turnserver help).

===================================================================================

CLUSTERS

TURN Server can be a part of the cluster installation. But, to support the "even port" functionality 
(RTP/RTCP streams pairs) the client requests from a particular IP must be delivered to the same 
TURN Server instance, so it requires some networking setup massaging for the cluster. The reason is that 
the RTP and RTCP relaying endpoints must be allocated on the same relay IP. It would be possible 
to design a scheme with the application-level requests forwarding (and we may do that later) but 
it would affect the performance.

===================================================================================

FILES

/etc/turnserver.conf

/etc/turnuserdb.conf

/usr/local/etc/turnserver.conf

/usr/local/etc/turnuserdb.conf

===================================================================================

STANDARDS

new STUN RFC 5389

TURN RFC 5766

TURN-TCP extention RFC 6062
 
TURN IPv6 extention RFC 6156

STUN/TURN test vectors RFC 5769

STUN NAT behavior discovery RFC 5780

===================================================================================

SEE ALSO

	turnadmin, turnutils

===================================================================================

AUTHORS

Oleg Moskalenko <mom040267@gmail.com>


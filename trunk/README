GENERAL INFORMATION

The TURN Server project contains the source code of a TURN server and TURN client 
messaging library. Also, some extra programs provided, for testing-only 
purposes. 

See the INSTALL file for the building instructions.

After the build, you will have the following binary images:

1.	turnserver: TURN Server relay. 
The compiled binary image of the TURN Server program is located in bin/ sub-directory.

2.	turnadmin: TURN administration tool. This tool can be used to manage 
the user accounts (add/remove users, generate 
TURN keys for the users). For security reasons, we do not recommend 
storing passwords openly. The better option is to use pre-processed "keys" 
which are then used for authentication. These keys are generated by turnadmin. 
Turnadmin is a link to turnserver binary, but turnadmin performs different 
functions.
  
3.	uclient: emulates multiple UDP,TCP,TLS or DTLS clients. 
(this program is provided for the testing purposes only !)
The compiled binary image of this program is located in examples/bin/ 
sub-directory.

WARNING: the uclient program is a primitive client application. 
It does not implement the re-transmission pattern that is necessary for 
a correct TURN client implementation. In TURN, the retransmission burden 
is lying almost entirely on the client application. We provide the messaging 
functionality in the client library, but the client must implement 
the correct Networking IO processing in the client program code.

4.	peer: a simple stateless UDP-only "echo" server, 
to be used as the final server in relay pattern ("peer"). For every incoming 
UDP packet, it simply echoes it back.
(this program is provided for the testing purposes only !) 
When the test clients are communicating in the client-to-client manner 
(when the "uclient" program is used with "-y" option) then the peer
is not needed.
	
The compiled binary image of this program is located in examples/bin/ subdirectory.
   
5.	stunclient: a simple STUN client example. 
The compiled binary image of this program is located in examples/bin/ subdirectory.
  
6.	rfc5769check: a utility that checks the correctness of the STUN/TURN protocol implementation.

In the "examples/scripts" subdirectory, you will find the examples of command lines to be used 
to run the programs. The scripts are meant to be run from examples/ subdirectory, for example:

$ cd examples
$ ./scripts/secure_relay.sh
  
RUNNING THE TURN SERVER

Options note: turnserver and turnadmin have long and short option names, for most options.
Some options have only long form, some options have only short form. Their syntax 
somewhat different, if an argument is required:

The short form must be used as this (for example):

  $ turnserver -L 12.34.56.78
  
The long form equivalent must use the "=" character:

  $ turnserver --listening-ip=12.34.56.78
  
If this is a flag option (no argument required) then their usage are the same, for example:

 $ turnserver -a
 
is equivalent to:

 $ turnserver --lt-cred-mech
  
===============================================================================

  NAME
  
turnserver application is a TURN relay server implementation.
  
  SYNOPSIS
  
$ turnserver [-n | -c <config-file> ] [-vfao] [-b <user-db-file> | --userdb=<user-db-file> ] [-z | --no-auth | -a | --lt-cred-mech ] [options]
$ turnserver -h
  
  DESCRIPTION						
  
Config file setting:  

-n		Do not use configuration file, use only command line parameters.

-c		Configuration file name (default - turnserver.conf).
		The format of config file can be seen in
		the supplied examples/etc/turnserver.conf example file. Long 
		names of the options are used as the configuration 
		items names in the file. If not an absolute path is supplied, 
		then the file is searched in the following directories: 
		  * current directory
		  * current directory etc/ subdirectory
		  * upper directory level etc/
		  * /etc/ 
		  * /usr/local/etc/
		  * installation directory /etc
				  
-b, --userdb	'Dynamic' user database file name (default - turnuserdb.conf).
		This user database is being dynamically checked while the turnserver 
		is working, and the user accounts can be changed dynamically by
		editing the file.

Flags:   

-v, --verbose		Verbose.

-o, --daemon		Run server as daemon.

-f, --fingerprint	Use fingerprints in the TURN messages. If an incoming request
			contains fingerprint, then TURN server will always add 
			fingerprints to the messages in this session, regardless of the
			per-server setting.

-a, --lt-cred-mech	Use long-term credential mechanism.

-z, --no-auth		Do not use any credential mechanism, allow anonymous access. 
			Opposite to -a option. This is default option when no 
			authentication-related options are set.
			By default, no credential mechanism is used -
			any user is allowed.

--no-udp			Do not start UDP client listeners.

--no-tcp			Do not start TCP client listeners.

--no-tls			Do not start TLS client listeners.

--no-dtls			Do not start DTLS client listeners.

--no-udp-relay		Do not allow UDP relay endpoints, use only TCP relay option.

--no-tcp-relay		Do not allow TCP relay endpoints, use only UDP relay option.

--stale-nonce		Use extra security with nonce value having limited lifetime (600 secs). 

-h				Help.
    
Options with required values:  

-d, --listening-device		Listener interface device (optional functionality, Linux only). 
				The turnserver process must have root privileges to bind the 
				listening endpoint to a device. If turnserver must run as a 
				process without root privileges, then just do not use this setting.

-L, --listening-ip		Listener IP address of relay server. 
				Multiple listeners can be specified:
				... -L ip1 -L ip2 -L ip3..."
				If no IP(s) specified, then all IPv4 and 
				IPv6 system IPs will be used for listening.
				The same ip(s) can be used as both listening and relay ip(s).

-p, --listening-port		TURN listener port for UDP and TCP listeners (Default: 3478).

--tls-listening-port		TURN listener port for TLS and DTLS listeners (Default: 5349).

--alt-listening-port		Alternative listening port for UDP and TCP listeners
				(default value is 3479). This is needed for RFC 5780 support
				(STUN extension specs, NAT behavior discovery). The TURN Server 
				supports RFC 5780 only if it is started with more than one 
				listening IP address of the same family (IPv4 or IPv6).
							 
--alt-tls-listening-port	Alternative listening port for TLS and DTLS protocols.
				Default value is 5350.

-i, --relay-device		Relay interface device for relay sockets 
				(optional, Linux only).

-E, --relay-ip			Relay address (the local IP address that 
				will be used to relay the packets to the 
				peer). Multiple relay addresses may be used:
				... -E ip1 -E ip2 -E ip3 ...
				If no relay IP(s) specified, then all 
				non-loopback system IPs will be used.
				The same ip(s) can be used as both listening and relay ip(s).

-X, --external-ip		"External" TURN Server address if the server is behind NAT.
				In the server-behind-NAT situation, only one relay address must be used, and
				that single relay address must be mapped by NAT to the 'external' IP.
				For this 'external' IP, NAT must forward ports directly (relayed port 12345
				must be always mapped to the same 'external' port 12345).
				This value, if not empty, is returned in XOR-RELAYED-ADDRESS field.
				By default, this value is empty, and the real relay IP address is used.
				
-m, --relay-threads		number of extra threads to handle the 
				established connections.
				By default, everything in handled in single thread 
				(the default number of extra threads is 0).

--min-port			Lower bound of the UDP port range for relay 
				endpoints allocation.
				Default value is 49152, according to RFC 5766.

--max-port			Upper bound of the UDP port range for relay 
				endpoints allocation.
				Default value is 65535, according to RFC 5766.

-u, --user			User account, in the column-separated 
				form 'username:key'. 
				The key is either the user password, or
				the key is generated
				by turnadmin command. In the second case,
				the key must be prepended with '0x' symbols.
				The key is calculated over the user name, 
				the realm, and the user password.

-r, --realm			Realm to be used for all users.

-q, --user-quota		Per-user allocations quota: how many concurrent 
				allocations a user can create.

-Q, --total-quota		Total allocations quota: global limit on concurrent allocations.
 
-s, --max-bps			Max bytes-per-second bandwidth a TURN session is allowed to handle
				(input and output network streams combined). Anything above that limit
				will be dropped.

--cert				Certificate file, PEM format. Same file 
				search rules applied as for the configuration 
				file. If both --no-tls and --no-dtls options 
				are specified, then this parameter is not needed.
				Default value is turn_server_cert.pem.

--pkey		     		Private key file, PEM format. Same file 
				search rules applied as for the configuration 
				file. If both --no-tls and --no-dtls options 
				are specified, then this parameter is not needed.
				Default value is turn_server_pkey.pem.

===============================================================================

  NAME

turnadmin application is a TURN relay administration tool. 
  
  SYNOPSIS  

$ turnadmin [command] [options]

$ turnadmin [ -h | --help]

  DESCRIPTION
  
Commands:  

-k, --key	Generate key for a user.
-a, --add       Add or update a user.
-d, --delete	Delete a user.
  
Options with required values:  

-b, --userdb	'Dynamic' user database file name (default - turnuserdb.conf).
-u, --user	User name.
-r, --realm	Realm.
-p, --password	Password.
-h, --help	Help.
  
Generate a key:  

$ turnadmin -k -u <username> -r <realm> -p <password>
  
Add/update a user (and realm) in the userdb file:  

$ turnadmin -a [-b <user-db-file>] -u <username> -r <realm> -p <password>
  
Delete a user from the userdb file:  

$ turnadmin -d [-c <user-db-file>] -u <username>
  
Help:  

$ turnadmin -h

==================================================================================
    
  NAME
  
uclient application is for test purposes only.
 
  SYNOPSIS  

$ uclient [-tSvsyhcxg] [options] <TURN-Server-IP-address>
  
  DESCRIPTION
  
It was designed to simulate multiple clients. It uses asynch IO API in 
libevent to handle multiple clients. A client connects to the relay, 
negotiates the session, and sends multiple (configured number) messages to the server (relay), 
expecting the same number of replies. The length of the messages is configurable. 
The message is an arbitrary octet stream, but it can be configured as a string. 
The number of the messages to send is configurable.

Flags:   

-t      Use TCP (default is UDP).

-T      TCP relay transport (default - UDP). Implies options -t, -y, -c, and ignores 
        flags and options -s, -e, -r and -g.

-S      Secure connection: TLS for TCP, DTLS for UDP.

-v      Verbose.

-s      Use "Send" method in TURN; by default, it uses TURN Channels.

-y      Use client-to-client connections: 
    	RTP/RTCP pair of channels to another RTP/RTCP pair of channels.
    	with this option the peer application is not used,
    	as the allocated relay endpoints are talking to each other.
    	 
-h      Hang on indefinitely after the last sent packet.

-c      Do not create rtcp connections.

-x      Request IPv6 relayed address (RFC6156).

-g      Set DONT_FRAGMENT parameter in TURN requests.

Options with required values:  

-l      Message length (Default: 100 Bytes).

-i      Certificate file (for secure connections only).

-k      Private key file (for secure connections only).

-p      TURN Server port (Defaults: 3478 unsecure, 5349 secure).

-n      Number of messages to send (Default: 5).

-d      Local interface device (optional, Linux only).

-L      Local IP address (optional).

-m      Number of clients (Default: 1, 2 or 4, depending on options).

-e      Peer address.

-r      Peer port (Default: 3480).

-z	Per-session packet interval in milliseconds (Default: 20).

See the examples in the "examples/scripts" directory.

====================================================================================
  
  NAME
    
peer application is a simple UDP-only echo backend server.  
  
  SYNOPSYS

$ peer [-v] [options]
  
  DESCRIPTION
  
This application is used for the test purposes only, as a 'peer' for the uclient application.

Options with required values:  

-p  Listening UDP port (Default: 3480).
 
-d  Listening interface device (optional)

-L  Listening address of peer server. Multiple listening addresses can be used, IPv4 and IPv6.

-v  Verbose

===================================================================================

  NAME
  
stunclient is a basic STUN client. 
  
  SYNOPSIS

$ stunclient [options] <STUN-Server-IP-address>
  
  DESCRIPTION
  
It sends a STUN request (over UDP) and shows the reply information.

Options with required values:  

-p  STUN server port (Default: 3478).
 
-L  Local address to use (optional).

The stunclient program checks the results of the first request, 
and if it finds that the STUN server supports RFC 5780 
(the binding response reveals that) then the stunclient makes a couple more 
requests with different parameters, to demonstrate the NAT discovery capabilities.
  
===================================================================================

  NAME
  
rfc5769check tests the correctness of STUN protocol implementation.   
  
  SYNOPSIS
  
  $ rfc5769check
  
  DESCRIPTION

rfc5769check tests the correctness of STUN protocol implementation 
against the test vectors predefined in RFC 5769 and prints the results of the tests on the screen.
      
Usage:  

$ rfc5769check

===================================================================================

LIBRARIES

In the lib/ sub-directory the build process will create TURN client messaging library.
In the include/ sub-directory, the necessary include files will be placed.
The C++ wrapper for the messaging functionality is located in TurnMsgLib.h header.
An example of C++ code can be found in stunclient.c file. 

===================================================================================
 
DOCS

After installation, run the command:

$ man turnserver

to see the man page.

In the docs/html subdirectory of the original archive tree, you will find the client library 
reference. After the installation, it will be placed in PREFIX/share/doc/turnserver/html.

===================================================================================

LOGS

When the TURN Server starts, it makes efforts to create a log file turn_<pid>.log 
in the following directories:

	* /var/log
	* /log/
	* /var/tmp
	* /tmp
	* current directory

If all efforts failed (due to the system permission settings) then all 
log messages are sent only to the standard output of the process.

===================================================================================

CLUSTERS

TURN Server can be a part of the cluster installation. But, to support the "even port" functionality 
(RTP/RTCP streams pairs) the client requests from a particular IP must be delivered to the same 
TURN Server instance, so it requires some networking setup massaging for the cluster. The reason is that 
the RTP and RTCP relaying endpoints must be allocated on the same relay IP. It would be possible 
to design a scheme with the application-level requests forwarding (and we may do that later) but 
it would affect the performance.

===================================================================================

FILES

/etc/turnserver.conf

/etc/turnuserdb.conf

/usr/local/etc/turnserver.conf

/usr/local/etc/turnuserdb.conf

===================================================================================

STANDARDS

new STUN RFC 5389

TURN RFC 5766
 
IPv6 extention RFC 6156

test vectors RFC 5769

NAT behavior discovery RFC5780

===================================================================================

AUTHORS

Oleg Moskalenko <mom040267@gmail.com>


GENERAL INFORMATION

The TURN Server project contains the source code of a TURN server and TURN client 
messaging library. Also, some extra programs provided, for testing-only 
purposes. 

See the INSTALL file for the building instructions.

After the build, you will have the following binary images:

1.	turnserver: TURN Server relay. 
The compiled binary image of this program is located in bin/ sub-directory.

2.	turnadmin: TURN administration tool. This tool can be used to generate 
TURN keys for the user accounts. For security reasons, we do not recommend 
storing passwords openly. The better option is to use pre-processed "keys" 
which are then used for authentication. These keys are generated by turnadmin. 
Turnadmin is a link to turnserver binary, but turnadmin performs different 
functions.
  
3.	uclient: emulates multiple UDP,TCP,TLS or DTLS clients. 
(this program is provided for the testing purposes only !)
The compiled binary image of this program is located in turn.examples/bin/ 
sub-directory.

WARNING: the uclient program is a primitive client application. 
It does not implement the re-transmission pattern that is necessary for 
a correct TURN client implementation. In TURN, the retransmission burden 
is lying entirely on the client application. We provide the messaging 
functionality in the client library, but the client must implement 
the correct Networking IO processing in the client program code.

4.	peer: a simple stateless UDP-only "echo" server, 
	to be used as the final server in relay pattern ("peer"). For every incoming 
	UDP packet, it simply echoes it back.
	(this program is provided for the testing purposes only !) 
	When the test clients are communicating in the client-to-client manner, 
	this component is not needed.
	
The compiled binary image of this program is located in turn.examples/bin/ subdirectory.
   
5.	stunclient: a simple STUN client example.
The compiled binary image of this program is located in turn.examples/bin/ subdirectory.

In the "scripts" subdirectory, you will find the examples of command lines to be used 
to run the programs.
  
RUN

1.	turnserver application is a TURN relay server implementation. 
  
Usage:
  
$ turnserver [-vfao] [-n | -c <config-file> ] [-b <user-db-file> | --userdb=<user-db-file> ] [options]

$ turnserver -h
  
Flags:   

-v, --verbose			Verbose.

-o, --daemon			Run server as daemon.

-f, --fingerprint		Use fingerprints in the TURN messages.

-a, --lt-cred-mech		Use long-term credential mechanism. 
						By default, no credential mechanism is used -
						any user is allowed.
  
Config file setting:  

-n				Do not use configuration file, use only command line parameters.

-c				Configuration file name (default - turnserver.conf).
				The format of config file can be seen in
				the supplied etc/turnserver.conf example file. Long 
				names of the options are used as the configuration 
				items names in the file. If not an absolute path is supplied, 
				then the file is searched in the following directories: 
				  * current directory
				  * current directory etc/ subdirectory
				  * upper directory level etc/
				  * /etc/ 
				  * /usr/local/etc/
				  * installation directory /etc
				  
-b, --userdb	'Dynamic' user database file name (default - turnuserdb.conf).
				This user database is being dynamically checked while the turnserver 
				is working, and the user accounts can be changed dynamically by
				editing the file.
    
Options:  

-d, --listening-device		Listener interface device (optional functionality, Linux only).

-p, --listening-port		TURN listener port for UDP and TCP listeners (Default: 3478).

--tls-listening-port		TURN listener port for TLS and DTLS listeners (Default: 5349).

-L, --listening-ip		Listener IP address of relay server. 
				Multiple listeners can be specified.
				If no IP(s) specified, then all IPv4 and 
				IPv6 system IPs will be used for listening.

-i, --relay-device		Relay interface device for relay sockets 
				(optional, Linux only).

-E, --relay-ip			Relay address (the local IP address that 
				will be used to relay the packets to the 
				peer). Multiple relay addresses may be used.
				If no relay IP(s) specified, then all 
				non-loopback system IPs will be used.

-m, --relay-threads		number of extra threads to handle the 
				established connections.
				By default, everything in handled in single thread 
				(the default number of extra threads is 0).

--min-port			Lower bound of the UDP port range for relay 
				endpoints allocation.
				Default value is 49152, according to RFC 5766.

--max-port			Upper bound of the UDP port range for relay 
				endpoints allocation.
				Default value is 65535, according to RFC 5766.

-u, --user			User account, in the column-separated 
				form 'username:key'. 
				The key is either the user password, or
				the key is generated
				by turnadmin command. In the second case,
				the key must be prepended with '0x' symbols.
				The key is calculated over the user name, 
				the realm, and the user password.

-r, --realm			Realm to be used for all users.

-q, --user-quota		Per-user allocation quota.

-Q, --total-quota		total allocation quota.

--cert				Certificate file, PEM format. Same file 
				search rules applied as for the configuration 
				file. If both --no-tls and --no-dtls options 
				are specified, 
				then this parameter is not needed.

--pkey		     		Private key file, PEM format. Same file 
				search rules applied as for the configuration 
				file. If both --no-tls and --no-dtls options 
				are specified, then this parameter is not needed.

--no-udp			Do not start UDP listeners.

--no-tcp			Do not start TCP listeners.

--no-tls			Do not start TLS listeners.

--no-dtls			Do not start DTLS listeners.

-h				Help.
	
2.	turnadmin application is a TURN relay administration tool. 
  
Usage:  

$ turnadmin [command] [options]

$ turnadmin [ -h | --help]
  
Commands:  

-k, --key		Generate key for a user.
-a, --add       Add or update a user.
-d, --delete	Delete a user.
  
Options:  

-b, --userdb	'Dynamic' user database file name (default - turnuserdb.conf).
-u, --user		User name.
-r, --realm		Realm.
-p, --password	Password.
-h, --help		Help.
  
Generate a key:  

$ turnadmin -k -u <username> -r <realm> -p <password>
  
Add/update a user (and realm) in the userdb file:  

$ turnadmin -a [-b <user-db-file>] -u <username> -r <realm> -p <password>
  
Delete a user from the userdb file:  

$ turnadmin -d [-c <user-db-file>] -u <username>
  
Help:  

$ turnadmin -h
    
3.	uclient application is for test purposes only. 
It was designed to simulate multiple clients. It uses asynch IO API in 
libevent to handle multiple clients. A client connects to the relay, 
negotiates the session, and sends multiple (configured number) messages to the server (relay), 
expecting the same number of replies. The length of the messages is configurable. 
The message is an arbitrary octet stream, but it can be configured as a string. 
The number of the messages to send is configurable. 
  
Usage:  

$ uclient [-tSvsyhcxg] [options] <TURN-Server-IP-address>
  
Flags:  

-t      Use TCP (default is UDP).
-S      Secure connection: TLS for TCP, DTLS for UDP.
-v      Verbose.
-s      Use "send" method in TURN; by default, it uses TURN "channels".
-y      Use client-to-client connections: 
    	RTP/RTCP pair of channels to another RTP/RTCP pair of channels.
    	with this option the peer application is not used,
    	as the relay endpoints are talking to each other. 
-h      Hang on indefinitely after the last sent packet.
-c      Do not create rtcp connections.
-x      Request IPv6 relayed address (RFC6156).
-g      Set DONT_FRAGMENT parameter in TURN requests.
  
Options:  

-l      Message length (Default: 100 Bytes).
-i      Certificate file (for secure connections only).
-k      Private key file (for secure connections only).
-p      TURN Server port (Default: 3478 unsecure, 5349 secure).
-n      Number of messages to send (Default: 5).
-d      Local interface device (optional).
-L      Local IP address (optional).
-m      Number of clients (default is 1, 2 or 4, depending on options below).
-e      Peer address.
-r      Peer port (default 3479).

See the examples in the "scripts" directory.
    
4.	peer application is a simple UDP-only echo backend server. This application
is used for the test purposes only, as a 'peer' for the uclient application. 
  
Usage:  

$ peer [-v] [options]
  
Options:  

-p  Listening UDP port (Default: 3479). 
-d  Listening interface device (optional)
-L  Listening address of peer server
-v  Verbose

5.	stunclient is a basic STUN client. It sends a STUN request (over UDP) 
and shows the reply information. This stunclient can work only with "unsecure"
TURN Server - it cannot answer the authentication challenge.  
  
Usage:  

$ stunclient [options] <STUN-Server-IP-address>
  
Options:  

-p  STUN server port (Default: 3478). 
-L  Local address to use (optional).

LIBRARIES

In the lib/ sub-directory the build process will create TURN client messaging library.
In the include/ sub-directory, the necessary include files will be placed.
 
DOCS

After installation, run the command:

$ man turnserver

to see the man page.

LOGS

The TURN Server makes efforts to create a log file turn_<pid>.log 
in the following directories:

	* /var/log
	* /log/
	* /var/tmp
	* /tmp
	* current directory

If all efforts failed (due to the system permission settings) then all 
log messages are sent only to the standard output of the process.
 
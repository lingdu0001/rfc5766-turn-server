#!/bin/sh

# Proprietary configure script of TURN Server project

cleanup() {
	rm -rf ${TMPCPROGC}
	rm -rf ${TMPCPROGB}
	rm -rf ${TH_TMPCPROGC}
	rm -rf ${TH_TMPCPROGB}
	rm -rf ${D_TMPCPROGC}
	rm -rf ${D_TMPCPROGB}
	rm -rf ${E_TMPCPROGC}
	rm -rf ${E_TMPCPROGO}
}

testlibraw() {
    ${CC} ${TMPCPROGC} -o ${TMPCPROGB} ${OSCFLAGS} ${OSLIBS} -${1} 2>/dev/null
    ER=$?
    if ! [ ${ER} -eq 0 ] ; then
	echo "Do not use -${1}"
	return 0
    else
	OSLIBS="${OSLIBS} -${1}"
	return 1
    fi
}

testlibevent2() {
    ${CC} -c ${E_TMPCPROGC} -o ${E_TMPCPROGO} ${OSCFLAGS} 2>/dev/null
    ER=$?
    if ! [ ${ER} -eq 0 ] ; then
	echo "Libevent2 development is not installed properly"
	return 0
    else
	return 1
    fi
}

testlib() {
    testlibraw l${1}
}

pthread_testlib() {

	if [ -z "${PTHREAD_LIBS}" ] ; then
    	testlibraw pthread
    	ER=$?
    	if [ ${ER} -eq 0 ] ; then
    		testlib pthread
    	fi
    else
    	OSLIBS="${OSLIBS} ${PTHREAD_LIBS}"
    fi

    ${CC} ${TH_TMPCPROGC} -o ${TH_TMPCPROGB} ${OSCFLAGS} ${OSLIBS} 2>/dev/null
    ER=$?
    if ! [ ${ER} -eq 0 ] ; then
		${CC} ${TH_TMPCPROGC} -o ${TH_TMPCPROGB} ${OSCFLAGS} ${OSLIBS} -D_GNU_SOURCE 2>/dev/null
		ER=$?
		if ! [ ${ER} -eq 0 ] ; then
	    	echo "Do not use pthreads"
	    	return 0
		else 
	    	echo "Older GNU pthread library found"
	    	OSCFLAGS="${OSCFLAGS} -D_GNU_SOURCE"
	    	return 1
		fi
    	else
		return 1
    fi
}

testdaemon() {

	${CC} ${D_TMPCPROGC} -o ${D_TMPCPROGB} ${OSCFLAGS} ${OSLIBS} 2>/dev/null
	ER=$?
	if [ ${ER} -eq 0 ] ; then
	    OSCFLAGS="${OSCFLAGS} -DHAS_DAEMON"
	fi
}

#########################
# Start
#########################

cleanup

#########################
# To be set:
#########################

if [ -z "${PREFIX}" ] ; then
	PREFIX=/usr/local
fi

if [ -z "${MANPREFIX}" ] ; then
	MANPREFIX=${PREFIX}
fi

if [ -z "${ARCHIVERCMD}" ] ; then
	ARCHIVERCMD="ar -r"
fi

OSCFLAGS="-I${PREFIX}/include/ -I/usr/local/include ${CFLAGS}"
OSLIBS="${LDFLAGS} -Llib -L${PREFIX}/lib/event2/ -L${PREFIX}/lib/ -L/usr/local/lib/event2/ -L/usr/local/lib/"
TURN_NO_THREADS=
TURN_NO_TLS=

MKDIR="mkdir -p"
INSTALL_PROGRAM="cp -f"
INSTALL_MAN="cp -f"
INSTALL_SCRIPT="cp -f"
INSTALL_SHARED_LIB="cp -f"
INSTALL_STATIC_LIB="cp -f"
INSTALL_DATA="cp -f"
INSTALL_DIR="cp -rf"
RMCMD="rm -rf"

#############################
# Adjustments for Solaris
#############################

SYSTEM=`uname`

if [ "${SYSTEM}" = "SunOS" ] ; then
# Solaris ? is this you ?!
    OSCFLAGS="${OSCFLAGS} -D__EXTENSIONS__ -D_XOPEN_SOURCE=500"
fi

#########################
# Temporary DIR location:
#########################

TMPDIR="."

if [ -d /var/tmp ] ; then
  TMPDIR="/var/tmp"
elif [ -d /tmp ] ; then
  TMPDIR=/tmp
fi

echo Use TMP dir ${TMPDIR}

#########################
# Basic C test programs
#########################

TMPCPROG=__test__ccomp__$$
TMPCPROGC=${TMPDIR}/${TMPCPROG}.c
TMPCPROGB=${TMPDIR}/${TMPCPROG}

cat > ${TMPCPROGC} <<!
#include <stdlib.h>
int main(int argc, char** argv) {
    return (int)(argv[argc][0]);
}
!

TH_TMPCPROG=__test__ccomp__pthread__$$
TH_TMPCPROGC=${TMPDIR}/${TH_TMPCPROG}.c
TH_TMPCPROGB=${TMPDIR}/${TH_TMPCPROG}

cat > ${TH_TMPCPROGC} <<!
#include <stdlib.h>
#include <pthread.h>
int main(int argc, char** argv) {
    pthread_mutexattr_settype(0,PTHREAD_MUTEX_RECURSIVE);
    return (int)pthread_create(0,0,0,0)+(int)(argv[argc][0]);
}
!

D_TMPCPROG=__test__ccomp__daemon__$$
D_TMPCPROGC=${TMPDIR}/${D_TMPCPROG}.c
D_TMPCPROGB=${TMPDIR}/${D_TMPCPROG}

cat > ${D_TMPCPROGC} <<!
#include <stdlib.h>
#include <unistd.h>
int main(int argc, char** argv) {
    return (int)daemon(0,0)+(int)(argv[argc][0]);
}
!

E_TMPCPROG=__test__ccomp__libevent2__$$
E_TMPCPROGC=${TMPDIR}/${E_TMPCPROG}.c
E_TMPCPROGO=${TMPDIR}/${E_TMPCPROG}.o

cat > ${E_TMPCPROGC} <<!
#include <stdlib.h>
#include <event2/event.h>
int main(int argc, char** argv) {
    return (int)(argv[argc][0]);
}
!

##########################
# What is our compiler ?
##########################

if [ -z "${CC}" ] ; then
    CC=cc
    ${CC} ${TMPCPROGC} ${OSCFLAGS} -o ${TMPCPROGB} 2>/dev/null
	ER=$?
	if ! [ ${ER} -eq 0 ] ; then
		CC=gcc
    	${CC} ${TMPCPROGC} ${OSCFLAGS} -o ${TMPCPROGB} 2>/dev/null
		ER=$?
		if ! [ ${ER} -eq 0 ] ; then
			CC=clang
    		${CC} ${TMPCPROGC} ${OSCFLAGS} -o ${TMPCPROGB} 2>/dev/null
			ER=$?
			if ! [ ${ER} -eq 0 ] ; then
				CC=unknown
			fi
		fi
	fi
fi

echo "Compiler: ${CC}"

${CC} ${TMPCPROGC} ${OSCFLAGS} -o ${TMPCPROGB}
ER=$?
if ! [ ${ER} -eq 0 ] ; then
    echo "ERROR: cannot use compiler ${CC} properly"
    cleanup
    exit
fi

###########################
# Check if we can use GNU
# or Clang compiler flags
###########################

GNUOSCFLAGS="-Wall -Wextra -Wformat-security -Wnested-externs -Wstrict-prototypes  -Wmissing-prototypes -Wpointer-arith -Wcast-qual"

${CC} -Werror ${GNUOSCFLAGS} ${TMPCPROGC} ${OSCFLAGS} -o ${TMPCPROGB} 2>/dev/null
ER=$?
if ! [ ${ER} -eq 0 ] ; then
	echo "Hm..."
	${CC} -Wall ${TMPCPROGC} ${OSCFLAGS} -o ${TMPCPROGB} 2>/dev/null
	ER=$?
	if ! [ ${ER} -eq 0 ] ; then
    	echo "Not an ordinary GNU or Clang compiler"
    else
    	echo "C++ or something..."
    	OSCFLAGS="-Wall ${OSCFLAGS}"
    fi
else
    OSCFLAGS="${GNUOSCFLAGS} ${OSCFLAGS}"
fi

###########################
# Test some general-purpose
# libraries 
###########################

testlib socket
testlib nsl
testlib dl
testlib rt

###########################
# Can we use multi-threading ?
###########################

pthread_testlib
ER=$?
if [ ${ER} -eq 0 ] ; then
	echo "WARNING: Cannot find pthread library functions."
	echo "Using single-thread mode."
	TURN_NO_THREADS="-DTURN_NO_THREADS"
fi

###########################
# Can we use daemon ?
###########################

testdaemon

###########################
# Test OpenSSL installation
###########################

testlib ssl
ER=$?
if ! [ ${ER} -eq 0 ] ; then
    echo "SSL lib found."
else
    echo "ERROR: OpenSSL development libraries are not installed properly in required location."
    echo "Abort."
    cleanup
    exit
fi

testlib crypto
ER=$?
if ! [ ${ER} -eq 0 ] ; then
    echo "Crypto SSL lib found."
else
    echo "ERROR: OpenSSL Crypto development libraries are not installed properly in required location."
    echo "Abort."
    cleanup
    exit
fi

###########################
# Test Libevent2 setup
###########################
testlibevent2
ER=$?
if ! [ ${ER} -eq 0 ] ; then
    echo "Libevent2 development found."
else
    echo "ERROR: Libevent2 development libraries are not installed properly in required location."
    echo "ERROR: may be you have just too old libevent tool - then you have to upgrade it."
    echo "See the INSTALL file."
    echo "Abort."
    cleanup
    exit
fi

testlib event
ER=$?
if ! [ ${ER} -eq 0 ] ; then
    echo "Libevent2 runtime found."
else
    echo "ERROR: Libevent2 runtime libraries are not installed properly in required location."
    echo "See the INSTALL file."
    echo "Abort."
    cleanup
    exit
fi

testlib event_openssl
ER=$?
if ! [ ${ER} -eq 0 ] ; then
    echo "Libevent2-openssl found."
else
    echo "ERROR: Libevent2 development libraries are not compiled with OpenSSL support."
    echo "TLS will be disabled."
    TURN_NO_TLS="-DTURN_NO_TLS"
fi

if [ -z "${TURN_NO_THREADS}" ] ; then
	testlib event_pthreads
	ER=$?
	if ! [ ${ER} -eq 0 ] ; then
    	echo "Libevent2 pthreads found."
	else
    	echo "WARNING: Libevent2 development libraries are not compiled with threads support."
    	echo "Using single-thread mode."
		TURN_NO_THREADS="-DTURN_NO_THREADS"
	fi
fi

###############################
# So, what we have now:
###############################

OSCFLAGS="${OSCFLAGS} ${TURN_NO_THREADS} ${TURN_NO_TLS} -D__USE_OPENSSL__ -DINSTALL_PREFIX=${PREFIX}"

echo make PREFIX=${PREFIX} OSLIBS="${OSLIBS}" OSCFLAGS="${OSCFLAGS}" $@

###############################
# Make make:
###############################

echo "#################################" > Makefile
echo "# Generated by configure script #" >> Makefile
echo "#################################" >> Makefile
echo "CC = ${CC}" >> Makefile
echo "PREFIX = ${PREFIX}" >> Makefile
echo "MANPREFIX = ${MANPREFIX}" >> Makefile
echo "LDFLAGS += ${OSLIBS}" >> Makefile
echo "CFLAGS += ${OSCFLAGS}" >> Makefile
echo "ARCHIVERCMD = ${ARCHIVERCMD}" >> Makefile
echo "MKDIR = ${MKDIR}" >> Makefile
echo "INSTALL_PROGRAM = ${INSTALL_PROGRAM}" >> Makefile
echo "INSTALL_MAN = ${INSTALL_MAN}" >> Makefile
echo "INSTALL_SCRIPT = ${INSTALL_SCRIPT}" >> Makefile
echo "INSTALL_SHARED_LIB = ${INSTALL_SHARED_LIB}" >> Makefile
echo "INSTALL_STATIC_LIB = ${INSTALL_STATIC_LIB}" >> Makefile
echo "INSTALL_DATA = ${INSTALL_DATA}" >> Makefile
echo "INSTALL_DIR = ${INSTALL_DIR}" >> Makefile
echo "RMCMD = ${RMCMD}" >> Makefile
echo "################################" >> Makefile
echo "" >> Makefile
cat Makefile.in >> Makefile

#make PREFIX=${PREFIX} OSLIBS="${OSLIBS}" OSCFLAGS="${OSCFLAGS}" -f Makefile.all $@

###############################
# End:
###############################

cleanup



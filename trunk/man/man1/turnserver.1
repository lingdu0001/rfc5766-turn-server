.\" Text automatically generated by txt2man
.TH TURN  "26 January 2013" "" ""
.SH GENERAL INFORMATION

The \fBTURN Server\fP project contains the source code of a TURN server and TURN client 
messaging library. Also, some extra programs provided, for testing-only 
purposes. 
.PP
See the INSTALL file for the building instructions.
.PP
After the build, you will have the following binary images:
.TP
.B
1.
\fIturnserver\fP: \fBTURN Server\fP relay. 
The compiled binary image of the \fBTURN Server\fP program is located in bin/ sub-directory.
.TP
.B
2.
\fIturnadmin\fP: TURN administration tool. This tool can be used to manage 
the user accounts (add/remove users, generate 
TURN keys for the users). For security reasons, we do not recommend 
storing passwords openly. The better option is to use pre-processed "keys" 
which are then used for authentication. These keys are generated by \fIturnadmin\fP. 
Turnadmin is a link to \fIturnserver\fP binary, but \fIturnadmin\fP performs different 
functions.
.TP
.B
3.
\fIuclient\fP: emulates multiple UDP,TCP,TLS or DTLS clients. 
(this program is provided for the testing purposes only !)
The compiled binary image of this program is located in examples/bin/ 
sub-directory.
.PP
WARNING: the \fIuclient\fP program is a primitive client application. 
It does not implement the re-transmission pattern that is necessary for 
a correct TURN client implementation. In TURN, the retransmission burden 
is lying almost entirely on the client application. We provide the messaging 
functionality in the client library, but the client must implement 
the correct Networking IO processing in the client program code.
.TP
.B
4.
\fIpeer\fP: a simple stateless UDP-only "echo" server, 
to be used as the final server in relay pattern ("\fIpeer\fP"). For every incoming 
UDP packet, it simply echoes it back.
(this program is provided for the testing purposes only !) 
When the test clients are communicating in the client-to-client manner 
(when the "\fIuclient\fP" program is used with "\fB-y\fP" option) then the \fIpeer\fP
is not needed.
.PP
The compiled binary image of this program is located in examples/bin/ subdirectory.
.TP
.B
5.
\fIstunclient\fP: a simple STUN client example. 
The compiled binary image of this program is located in examples/bin/ subdirectory.
.TP
.B
6.
\fIrfc5769check\fP: a utility that checks the correctness of the STUN/TURN protocol implementation.
.PP
In the "examples/scripts" subdirectory, you will find the examples of command lines to be used 
to run the programs. The scripts are meant to be run from examples/ subdirectory, for example:
.PP
$ cd examples
$ ./scripts/secure_relay.sh
.SH RUNNING THE TURN SERVER

===============================================================================
.SS  NAME
\fB
\fBturnserver application is a TURN relay server implementation.
\fB
.SS  SYNOPSIS
.nf
.fam C

$ \fIturnserver\fP [\fB-vfao\fP] [\fB-n\fP | \fB-c\fP <config-file> ] [\fB-b\fP <user-db-file> | \fB--userdb\fP=<user-db-file> ] [\fIoptions\fP]
$ \fIturnserver\fP \fB-h\fP

.fam T
.fi
.fam T
.fi
.SS  DESCRIPTION

.TP
.B
Flags:
.TP
.B
\fB-v\fP, \fB--verbose\fP
Verbose.
.TP
.B
\fB-o\fP, \fB--daemon\fP
Run server as daemon.
.TP
.B
\fB-f\fP, \fB--fingerprint\fP
Use fingerprints in the TURN messages.
.TP
.B
\fB-a\fP, \fB--lt-cred-mech\fP
Use long-term credential mechanism. 
By default, no credential mechanism is used -
any user is allowed.
.TP
.B
Config file setting:
.TP
.B
\fB-n\fP
Do not use configuration file, use only command line parameters.
.TP
.B
\fB-c\fP
Configuration file name (default - turnserver.conf).
The format of config file can be seen in
the supplied examples/etc/turnserver.conf example file. Long 
names of the \fIoptions\fP are used as the configuration 
items names in the file. If not an absolute path is supplied, 
then the file is searched in the following directories: 
.RS
.IP \(bu 3
current directory
.IP \(bu 3
current directory etc/ subdirectory
.IP \(bu 3
upper directory level etc/
.IP \(bu 3
/etc/
.IP \(bu 3
/usr/local/etc/
.IP \(bu 3
installation directory /etc
.RE
.TP
.B
\fB-b\fP, \fB--userdb\fP
\(cqDynamic' user database file name (default - turnuserdb.conf).
This user database is being dynamically checked while the \fIturnserver\fP 
is working, and the user accounts can be changed dynamically by
editing the file.
.TP
.B
Options:
.TP
.B
\fB-d\fP, \fB--listening-device\fP
Listener interface device (optional functionality, Linux only). 
The \fIturnserver\fP process must have root privileges to bind the 
listening endpoint to a device. If \fIturnserver\fP must run as a 
process without root privileges, then just do not use this setting.
.TP
.B
\fB-L\fP, \fB--listening-ip\fP
Listener IP address of relay server. 
Multiple listeners can be specified:
\.\.\. \fB-L\fP ip1 \fB-L\fP ip2 \fB-L\fP ip3\.\.\."
If no \fBIP\fP(s) specified, then all IPv4 and 
IPv6 system IPs will be used for listening.
The same \fBip\fP(s) can be used as both listening and relay \fBip\fP(s).
.TP
.B
\fB-p\fP, \fB--listening-port\fP
TURN listener port for UDP and TCP listeners (Default: 3478).
.TP
.B
\fB--tls-listening-port\fP
TURN listener port for TLS and DTLS listeners (Default: 5349).
.TP
.B
\fB--alt-listening-port\fP
Alternative STUN listening port for UDP and TCP listeners.
Default value is 24378. This is needed for RFC 5780 support
(STUN extension specs, NAT behavior discovery). The \fBTURN Server\fP 
supports RFC 5780 only if it is started with more than one 
listening IP address of the same family (IPv4 or IPv6).
.TP
.B
\fB--alt-tls-listening-port\fP
Alternative STUN listening port for TLS and DTLS protocols.
Default value is 23549.
.TP
.B
\fB-i\fP, \fB--relay-device\fP
Relay interface device for relay sockets 
(optional, Linux only).
.TP
.B
\fB-E\fP, \fB--relay-ip\fP
Relay address (the local IP address that 
will be used to relay the packets to the 
\fIpeer\fP). Multiple relay addresses may be used:
\.\.\. \fB-E\fP ip1 \fB-E\fP ip2 \fB-E\fP ip3 \.\.\.
If no relay \fBIP\fP(s) specified, then all 
non-loopback system IPs will be used.
The same \fBip\fP(s) can be used as both listening and relay \fBip\fP(s).
.TP
.B
\fB-m\fP, \fB--relay-threads\fP
number of extra threads to handle the 
established connections.
By default, everything in handled in single thread 
(the default number of extra threads is 0).
.TP
.B
\fB--min-port\fP
Lower bound of the UDP port range for relay 
endpoints allocation.
Default value is 49152, according to RFC 5766.
.TP
.B
\fB--max-port\fP
Upper bound of the UDP port range for relay 
endpoints allocation.
Default value is 65535, according to RFC 5766.
.TP
.B
\fB-u\fP, \fB--user\fP
User account, in the column-separated 
form 'username:key'. 
The key is either the user password, or
the key is generated
by \fIturnadmin\fP command. In the second case,
the key must be prepended with '0x' symbols.
The key is calculated over the user name, 
the realm, and the user password.
.TP
.B
\fB-r\fP, \fB--realm\fP
Realm to be used for all users.
.TP
.B
\fB-q\fP, \fB--user-quota\fP
Per-user allocation quota.
.TP
.B
\fB-Q\fP, \fB--total-quota\fP
total allocation quota.
.TP
.B
\fB-s\fP, \fB--max-bps\fP
Max bytes-per-second bandwidth a TURN session is allowed to handle
(input and output network streams combined). Anything above that limit
will be dropped.
.TP
.B
\fB--cert\fP
Certificate file, PEM format. Same file 
search rules applied as for the configuration 
file. If both \fB--no-tls\fP and \fB--no-dtls\fP \fIoptions\fP 
are specified, 
then this parameter is not needed.
.TP
.B
\fB--pkey\fP
Private key file, PEM format. Same file 
search rules applied as for the configuration 
file. If both \fB--no-tls\fP and \fB--no-dtls\fP \fIoptions\fP 
are specified, then this parameter is not needed.
.TP
.B
\fB--no-udp\fP
Do not start UDP listeners.
.TP
.B
\fB--no-tcp\fP
Do not start TCP listeners.
.TP
.B
\fB--no-tls\fP
Do not start TLS listeners.
.TP
.B
\fB--no-dtls\fP
Do not start DTLS listeners.
.TP
.B
\fB-h\fP
Help.
.PP
===============================================================================
.SS  NAME
\fB
\fBturnadmin application is a TURN relay administration tool.
\fB
.SS  SYNOPSIS  

$ \fIturnadmin\fP [command] [\fIoptions\fP]
.PP
$ \fIturnadmin\fP [ \fB-h\fP | \fB--help\fP]
.SS  DESCRIPTION

.TP
.B
Commands:
.TP
.B
\fB-k\fP, \fB--key\fP
Generate key for a user.
.TP
.B
\fB-a\fP, \fB--add\fP
Add or update a user.
.TP
.B
\fB-d\fP, \fB--delete\fP
Delete a user.
.TP
.B
Options:
.TP
.B
\fB-b\fP, \fB--userdb\fP
\(cqDynamic' user database file name (default - turnuserdb.conf).
.TP
.B
\fB-u\fP, \fB--user\fP
User name.
.TP
.B
\fB-r\fP, \fB--realm\fP
Realm.
.TP
.B
\fB-p\fP, \fB--password\fP
Password.
.TP
.B
\fB-h\fP, \fB--help\fP
Help.
.TP
.B
Generate a key:
.PP
$ \fIturnadmin\fP \fB-k\fP \fB-u\fP <username> \fB-r\fP <realm> \fB-p\fP <password>
.TP
.B
Add/update a user (and realm) in the userdb file:
.PP
$ \fIturnadmin\fP \fB-a\fP [\fB-b\fP <user-db-file>] \fB-u\fP <username> \fB-r\fP <realm> \fB-p\fP <password>
.TP
.B
Delete a user from the userdb file:
.PP
$ \fIturnadmin\fP \fB-d\fP [\fB-c\fP <user-db-file>] \fB-u\fP <username>
.TP
.B
Help:
.PP
$ \fIturnadmin\fP \fB-h\fP
.PP
==================================================================================
.SS  NAME
\fB
\fBuclient application is for test purposes only.
\fB
.SS  SYNOPSIS  

$ \fIuclient\fP [\fB-tSvsyhcxg\fP] [\fIoptions\fP] <TURN-Server-IP-address>
.SS  DESCRIPTION

It was designed to simulate multiple clients. It uses asynch IO API in 
libevent to handle multiple clients. A client connects to the relay, 
negotiates the session, and sends multiple (configured number) messages to the server (relay), 
expecting the same number of replies. The length of the messages is configurable. 
The message is an arbitrary octet stream, but it can be configured as a string. 
The number of the messages to send is configurable. 
.RE
.TP
.B
Flags:
.RS
.TP
.B
\fB-t\fP
Use TCP (default is UDP).
.TP
.B
\fB-S\fP
Secure connection: TLS for TCP, DTLS for UDP.
.TP
.B
\fB-v\fP
Verbose.
.TP
.B
\fB-s\fP
Use "send" method in TURN; by default, it uses TURN "channels".
.TP
.B
\fB-y\fP
Use client-to-client connections: 
RTP/RTCP pair of channels to another RTP/RTCP pair of channels.
with this option the \fIpeer\fP application is not used,
as the relay endpoints are talking to each other.
.TP
.B
\fB-h\fP
Hang on indefinitely after the last sent packet.
.TP
.B
\fB-c\fP
Do not create rtcp connections.
.TP
.B
\fB-x\fP
Request IPv6 relayed address (RFC6156).
.TP
.B
\fB-g\fP
Set DONT_FRAGMENT parameter in TURN requests.
.TP
.B
Options:
.TP
.B
\fB-l\fP
Message length (Default: 100 Bytes).
.TP
.B
\fB-i\fP
Certificate file (for secure connections only).
.TP
.B
\fB-k\fP
Private key file (for secure connections only).
.TP
.B
\fB-p\fP
\fBTURN Server\fP port (Default: 3478 unsecure, 5349 secure).
.TP
.B
\fB-n\fP
Number of messages to send (Default: 5).
.TP
.B
\fB-d\fP
Local interface device (optional).
.TP
.B
\fB-L\fP
Local IP address (optional).
.TP
.B
\fB-m\fP
Number of clients (default is 1, 2 or 4, depending on \fIoptions\fP below).
.TP
.B
\fB-e\fP
Peer address.
.TP
.B
\fB-r\fP
Peer port (default 3479).
.PP
See the examples in the "examples/scripts" directory.
.PP
====================================================================================
.SS  NAME
\fB
\fBpeer application is a simple UDP-only echo backend server.
\fB
.SS  SYNOPSYS

$ \fIpeer\fP [\fB-v\fP] [\fIoptions\fP]
.SS  DESCRIPTION

This application is used for the test purposes only, as a '\fIpeer\fP' for the \fIuclient\fP application.
.RE
.TP
.B
Options:
.RS
.TP
.B
\fB-p\fP
Listening UDP port (Default: 3479).
.TP
.B
\fB-d\fP
Listening interface device (optional)
.TP
.B
\fB-L\fP
Listening address of \fIpeer\fP server. Multiple listening addresses can be used, IPv4 and IPv6.
.TP
.B
\fB-v\fP
Verbose
.PP
===================================================================================
.SS  NAME
\fB
\fBstunclient is a basic STUN client.
\fB
.SS  SYNOPSIS
.nf
.fam C

$ \fIstunclient\fP [\fIoptions\fP] <STUN-Server-IP-address>

.fam T
.fi
.fam T
.fi
.SS  DESCRIPTION

It sends a STUN request (over UDP)
and shows the reply information. This \fIstunclient\fP can work only with "unsecure"
\fBTURN Server\fP - it cannot answer the authentication challenge.
.RE
.TP
.B
Options:
.RS
.TP
.B
\fB-p\fP
STUN server port (Default: 3478).
.TP
.B
\fB-L\fP
Local address to use (optional).
.PP
The \fIstunclient\fP program checks the results of the first request, 
and if it finds that the STUN server supports RFC 5780 
(the binding response reveals that) then the \fIstunclient\fP makes a couple more 
requests with different parameters, to demonstrate the NAT discovery capabilities.
.PP
===================================================================================
.SS  NAME
\fB
\fBrfc5769check tests the correctness of STUN protocol implementation.
\fB
.SS  SYNOPSIS
.nf
.fam C

$ \fIrfc5769check\fP

.fam T
.fi
.fam T
.fi
.SS  DESCRIPTION

\fIrfc5769check\fP tests the correctness of STUN protocol implementation 
against the test vectors predefined in RFC 5769 and prints the results of the tests on the screen.
.TP
.B
Usage:
.PP
$ \fIrfc5769check\fP
.SH LIBRARIES

In the lib/ sub-directory the build process will create TURN client messaging library.
In the include/ sub-directory, the necessary include files will be placed.
The C++ wrapper for the messaging functionality is located in TurnMsgLib.h header.
An example of C++ code can be found in stunclient.c file. 
.SH DOCS

After installation, run the command:
.PP
$ man \fIturnserver\fP
.PP
to see the man page.
.PP
In the docs/html subdirectory of the original archive tree, you will find the client library 
reference. After the installation, it will be placed in PREFIX/share/doc/\fIturnserver\fP/html.
.SH LOGS

When the \fBTURN Server\fP starts, it makes efforts to create a log file turn_<pid>.log 
in the following directories:
.RS
.IP \(bu 3
/var/log
.IP \(bu 3
/log/
.IP \(bu 3
/var/tmp
.IP \(bu 3
/tmp
.IP \(bu 3
current directory
.RE
.PP
If all efforts failed (due to the system permission settings) then all 
log messages are sent only to the standard output of the process.
.SH CLUSTERS

\fBTURN Server\fP can be a part of the cluster installation. But, to support the "even port" functionality 
(RTP/RTCP streams pairs) the client requests from a particular IP must be delivered to the same 
\fBTURN Server\fP instance, so it requires some networking setup massaging for the cluster. The reason is that 
the RTP and RTCP relaying endpoints must be allocated on the same relay IP. It would be possible 
to design a scheme with the application-level requests forwarding (and we may do that later) but 
it would affect the performance.
.SH FILES

/etc/turnserver.conf
.PP
/etc/turnuserdb.conf
.PP
/usr/local/etc/turnserver.conf
.PP
/usr/local/etc/turnuserdb.conf
.SH STANDARDS

new STUN RFC 5389
.PP
TURN RFC 5766
.PP
IPv6 extention RFC 6156
.PP
test vectors RFC 5769
.PP
NAT behavior discovery RFC5780
.SH AUTHORS

Oleg Moskalenko <mom040267@gmail.com>

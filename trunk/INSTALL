I. DOWNLOAD

You have to download the archive file turnserver-*.tar.gz and unpack it:

$ tar xfz turnserver-*.tgz

it will create the directory 'turn-server' with all sources, build files, 
examples and documentation.

II. BUILD

If you are sure that you system is ready for the build (see the section 
"Extra libraries and Utilities" below) then you can build the system.
Just run the make command:

	$ cd turnserver-*
	$ make

	or the build script:

	$ ./build.sh

build.sh script will create bin sub-directory and put the TURN server there. 
The test applications will be located in testapps/bin/ 
sub-directory.

The programs can be either called directly, or a shell scripts can be used. 
The script examples are located in scripts directory. These scripts are just 
examples; you will have to change the script parameters for your environment.

"make clean" command will clean all results of the build process.

NOTE: On most modern systems, the build will produce dynamically linked 
executables. If you want statically linked executables, you have to modify, 
accordingly, the Makefile.

III. PLATFORMS

The TURN Server is using generic *NIX system APIs and is supposed to be usable 
on wide range of *NIX systems. 

The following platforms have been used in the development:

	- Linux Ubuntu 11.x and 12.x, i386 and x86_64
	- FreeBSD 6.x, i386
	- FreeBSD 8.x, i386
	- PC-BSD 9.x, x86_64
	- Solaris 11, x86_64
	- Linux CentOS / Red Hat Enterprise Edition 6.3, x86_64

It must work on many other *NIXes, as well. The build.sh script and/or 
Makefile may need adjustments for other *NIXes not mentioned above.

The code of the client messaging library can be used on Windows, too.

IV. COMPILERS

The TURN Server is written in C programming language, for portability 
and for the performance reasons. 

The tested C compilers are:

	- gcc 3.4.6 thru 4.7.2
	- clang 3.0 or better
	- Solaris Studio 12.3 C compiler, version 5.12

It may be compiled with others compilers, too.

V. EXTRA LIBRARIES AND UTILITIES

In addition to common *NIX OS services and libraries, to compile this code, 
OpenSSL (version 1.0.0a or better is recommended) and libevent2 (version 2.0.5 
or better) are required. For build, both must be installed
in full version (development headers and runtime libraries). For runtime, 
only runtime setup is required. If the build is modified for static linking, 
then even runtime installation is not needed.

OpenSSL and libevent2 can be downloaded from their web sites -
http://www.openssl.org and http://www.libevent.org. The installation
is pretty straightforward - the usual "./configure" and "make install" commands.
Install them into their default locations - the build.sh script and
the Makefile are assuming that they are installed in their default locations.
If not, then you will have to modify those.

FreeBSD, PC-BSD and Linux Ubuntu 11.10+ have even simpler way of the
third party tools installation:      

	*) PC-BSD or FreeBSD (the ports DB is assumed to be installed):

		$ cd /usr/ports/security/openssl/
		$ sudo make install
		$ cd /usr/ports/devel/libevent2/
		$ sudo make install

	**) Linux Ubuntu 11.10+:
		
		$ sudo apt-get install libssl-dev
		$ sudo apt-get install libevent-dev
		
		or you can use Synaptic or other software center. 

NOTE: OpenSSL to be installed before libevent2. When libevent2 is building, it 
is checking whether OpenSSL has been already installed, and which version of 
OpenSSL. If the OpenSSL is missed, or too old, then libevent_openssl library is 
not being created during the build, and you will not be able to compile the 
TURN Server with TLS support.

NOTE: An older libevent version, version 1.x.x, is often included in some *NIX 
distributions. That version has its deficiencies and is inferior to the newer 
libevent2, especially in the performance department. This is why we are 
not providing backward compatibility with the older libevent version. 
If you have a system with older libevent, then you have to install the new 
libevent2 from their web site. It was tested on older *NIXes and it works 
just fine. 

NOTE: OpenSSL version 1.0.0a or newer is recommended.

VI. TEST

If everything compiled properly, then the following programs must run 
together successfully, simulating TURN network routing in local networking 
environment:

Open three shell screens or consoles:

In shell number 1, run peer application: 
 $ scripts/peer.sh

In shell number 2, run local TURN server application:
 $ scripts/secure_relay.sh

In shell number 3, run test client application:

 $ scripts/secure_udp_client.sh

or

 $ scripts/secure_tcp_client.sh

If TLS is supported, then this command must work:

 $ scripts/secure_tls_client.sh
 
If DTLS is supported, then this command must work:

 $ scripts/secure_dtls_client.sh

If the client application produces output and in approximately 22 seconds prints 
the jitter, loss and round-trip-delay statistics, then everything runs fine.

Check the README file and the scripts relay.sh and secure_relay.sh as a guidance 
how to run the TURN server.

VII. CLIENT API LIBRARY.

The compilation process will create lib/ sub-directory with libturnclient.a library. 
The header files for this library are located in include/turn/client/ sub-directory.


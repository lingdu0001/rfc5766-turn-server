I. DOWNLOAD

You have to download the archive file turnserver-*.tar.gz and unpack it:

$ tar xfz turnserver-*.tgz

it will create the directory 'turnserver-*' with all sources, build files, 
examples and documentation.

II. BUILD

If you are sure that you system is ready for the build (see the section 
"Extra libraries and Utilities" below) then you can build the system.
First, you have to run the configure script:

	$ cd turnserver-*
	$ ./configure
	
It will create a Makefile customized for your system. 

By default, the generated Makefile will be set to install everything
in /usr/local directory. You can change that and some other settings my 
setting PREFIX variable in the command line. Compilation and linking options
can be customized, too. For example:

	$ PREFIX=/opt CFLAGS=-D_CAURIB LDFLAGS=-lshanka ./configure   

The script configure is a proprietary script. It will create a Makefile 
that you can use to build the project:

	$ make

The make command will create bin sub-directory and put the TURN server there. 
The test applications will be located in turn.examples/bin/ 
sub-directory.

The programs can be either called directly, or a shell scripts can be used. 
The script examples are located in scripts directory. These scripts are just 
examples; you will have to change the script parameters for your environment.

The command:

	$ make deinstall
	
will remove all installed TURN Server files from your system.

The command:

	$ make clean 
	
will clean all results of the build and configuration actions.

Do not run "make clean" before "make deinstall". The 'clean" command will
remove the Makefile and you will not be able to "deinstall" it then. If that 
happened, then run configure and make again, then deinstall and then clean.

NOTE: On most modern systems, the build will produce dynamically linked 
executables. If you want statically linked executables, you have to modify, 
accordingly, the Makefile.

III. INSTALL

run command:

$ make install

It will install turnserver in /usr/local/ directory (or to whatever directory
was set in the PREFIX variable). You will have to change 
/usr/local/etc/turnserver.conf file to adjust your runtime configuration.

IV. PLATFORMS

The TURN Server is using generic *NIX system APIs and is supposed to be usable 
on wide range of *NIX systems. 

The following platforms have been used in the development:

	- Linux Ubuntu 11.x and 12.x, i386 and x86_64
	- FreeBSD 6.x, i386
	- FreeBSD 8.x, i386
	- PC-BSD 9.x, x86_64
	- Solaris 11, x86_64
	- Linux CentOS / Red Hat Enterprise Edition 6.3, x86_64
	- Linux Debian 'squeeze', i386

It must work on many other *NIXes, as well. The build.sh script and/or 
Makefile may need adjustments for other *NIXes not mentioned above.

The code of the client messaging library can be compiled and used on 
Windows, too, but it is not supported for now.

V. COMPILERS

The TURN Server is written in C programming language, for portability 
and for the performance reasons. 

The tested C compilers are:

	- gcc 3.4.6 thru 4.7.2
	- clang 3.0 or better
	- Solaris Studio 12.3 C compiler, version 5.12

It may be compiled with others compilers, too.

VI. EXTRA LIBRARIES AND UTILITIES

In addition to common *NIX OS services and libraries, to compile this code, 
OpenSSL (version 1.0.0a or better is recommended) and libevent2 (version 2.0.5 
or better) are required. For build, both must be installed
in full version (development headers and runtime libraries). For runtime, 
only runtime setup is required. If the build is modified for static linking, 
then even runtime installation is not needed.

OpenSSL and libevent2 can be downloaded from their web sites -
http://www.openssl.org and http://www.libevent.org. The installation
is pretty straightforward - the usual "./configure" and "make install" commands.
Install them into their default locations - the build.sh script and
the Makefile are assuming that they are installed in their default locations.
If not, then you will have to modify those.

FreeBSD, PC-BSD and Linux Ubuntu 11.10+ have even simpler way of the
third party tools installation:      

	*) PC-BSD or FreeBSD (the ports database is assumed to be installed):

		$ cd /usr/ports/security/openssl/
		$ sudo make install
		$ cd /usr/ports/devel/libevent2/
		$ sudo make install

	**) Linux Ubuntu 11.10 or later:
		
		$ sudo apt-get install libssl-dev
		$ sudo apt-get install libevent-dev
		
		or you can use Synaptic or other software center. 

NOTE: OpenSSL to be installed before libevent2. When libevent2 is building, it 
is checking whether OpenSSL has been already installed, and which version of 
OpenSSL. If the OpenSSL is missed, or too old, then libevent_openssl library is 
not being created during the build, and you will not be able to compile the 
TURN Server with TLS support.

NOTE: An older libevent version, version 1.x.x, is often included in some *NIX 
distributions. That version has its deficiencies and is inferior to the newer 
libevent2, especially in the performance department. This is why we are 
not providing backward compatibility with the older libevent version. 
If you have a system with older libevent, then you have to install the new 
libevent2 from their web site. It was tested on older *NIXes and it works 
just fine. 

NOTE: OpenSSL version 1.0.0a or newer is recommended.

VII. TEST

If everything compiled properly, then the following programs must run 
together successfully, simulating TURN network routing in local networking 
environment:

Open three shell screens or consoles:

In shell number 1, run peer application (from build directory): 
 $ scripts/peer.sh

In shell number 2, run local TURN server application:
 $ scripts/relay.sh

In shell number 3, run test client application:

 $ scripts/udp_client.sh

or

 $ scripts/tcp_client.sh

If the client application produces output and in approximately 22 seconds prints 
the jitter, loss and round-trip-delay statistics, then everything is fine.

There is a similar set of secure* scripts for TURN environment with authnetication.

Try wireshark to check the communications between client, turnserver and the peer. 

Check the README file and the comments in the scripts relay.sh and secure_relay.sh 
as a guidance how to run the TURN server.

VIII. CLIENT API LIBRARY.

The compilation process will create lib/ sub-directory with libturnclient.a library. 
The header files for this library are located in include/turn/client/ sub-directory.

IX. DOCS

After installation, the man page turnserver(1) must be available.



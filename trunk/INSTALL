
I. PLATFORMS

The TURN Server is using generic UNIX system APIs and is supposed to be usable to wide range
on UNIX systems. 

The following platforms have been used in the development:

	- Linux Ubuntu 11.x and 12.x, 32 and 64 bits 
	- FreeBSD 6.x 32 bits
	- FreeBSD 8.x 32 bits
	- PC-BSD 9.x 64 bits (a FreeBSD offspring)
	- Solaris 11 x86 64 bits

It must work on many other UNIXes, as well. The build.sh script and/or 
Makefile may need adjustments for other UNIXes not mentioned above.

The code of the client messaging library can be used on Windows, too.

II. COMPILERS

The TURN Server is written in C programming language, for portability 
and for the performance reasons. 

The tested C compilers are:

	- gcc 3.4.6 thru 4.7.2
	- clang 3.0 or better
	- Solaris Studio 12.3 C compiler, version 5.12

It may be compiled with others compilers, too.

III. EXTRA LIBRARIES AND UTILITIES

In addition to common UNIX OS services and libraries, to compile this code, 
OpenSSL and libevent2 are required. For build, both must be installed
in full version (development headers and runtime libraries). For runtime, 
only runtime setup is required. If the build is modified for static linking, 
then even runtime installation is not needed.

OpenSSL and libevent2 can be downloaded from their web sites -
http://www.openssl.org and http://www.libevent.org. The installation
is pretty straightforward - the usual "./configure" and "make install" commands.
Install them into their default locations - the build.sh script and
the Makefile are assuming that they are installed in their default locations.
If not, then you will have to modify those.

FreeBSD, PC-BSD and Linux Ubuntu 11.10+ have even simpler way of the
third party tools installation:      

	*) PC-BSD or FreeBSD (the ports DB is assumed to be installed):

		$ cd /usr/ports/security/openssl/
		$ sudo make install
		$ cd /usr/ports/devel/libevent2/
		$ sudo make install

	**) Linux Ubuntu 11.10+:
		
		$ sudo apt-get install libssl-dev
		$ sudo apt-get install libevent-dev
		
		or you can use Synaptic or other software center. 

NOTE: OpenSSL to be installed before libevent2.

NOTE: An older libevent version, version 1.x.x, is often included in some Linux 
distributions. That version has its deficiencies and is inferior to the newer 
libevent2, especially in the performance department. This is why we are 
not providing backward compatibility with the older libevent version. 
If you have a system with older libevent, then install the new libevent2 from 
their web site. It was tested on older Linuxes and it works just fine. 

NOTE: OpenSSL version 1.0.0 or newer is recommended.

NOTE: The build system must have usual pthread library and headers available.

IV. BUILD

build.sh script will create bin sub-directory and put the TURN server there. 
The test applications will be located in testapps/bin/ 
sub-directory.

For most platforms, just simple "make" would suffice.

The supplied Makefile creates dynamically linked binaries.
If statically linked binaries are desired, then the Makefile
has to be changed, accordingly. 
 
The programs can be either called directly, or a shell scripts can be used. 
The script examples are located in scripts.examples directory.

"make clean" command will clean all results of the build process.

NOTE: On most modern systems, the build will produce dynamically linked 
executables. If you want statically linked executables, you have to modify, 
accordingly, the Makefile.

IV. TEST

If everything compiled properly, then the following programs must run 
together successfully, simulating TURN processing in local networking 
environment:

Open three shell screens or consoles:

In shell number 1, run peer application: 
 $ scripts.examples/peer.sh

In shell number 2, run local TURN server application:
 $ scripts.examples/secure_relay.sh

In shell number 3, run test client application:

 $ scripts.examples/secure_uclient.sh

If the client application produces output and in 22 seconds prints 
the jitter, loss and latency statistics, then everything runs fine.

Use scripts relay.sh and secure_relay.sh as guidance how to run 
the TURN server.

V. CLIENT API LIBRARY.

The compilation process will create lib/ sub-directory with libturnclient.a library. 
The header files for this library are located in include/turn/client/ sub-directory.



TURN(4 Apr 2013)	

== GENERAL INFORMATION ==

       The  *TURN Server* project contains the source code of a TURN server and
       TURN client messaging library. Also, some extra programs	provided,  for
       testing-only purposes.

       See the INSTALL file for	the building instructions.

       After the build,	you will have the following binary images:

 *     _*turnserver*_:  *TURN Server* relay. The compiled binary image of this program is located in bin/ sub-directory.
 *     _*turnadmin*_: TURN administration tool. This tool can be used to generate	TURN keys for the user accounts. For security reasons, we do not recommend storing passwords openly. The better	option is to use pre-processed "keys" which are then used for authentication. These keys are generated by _turnadmin_.
 *     _*uclient*_: emulates multiple UDP,TCP,TLS or DTLS  clients. The compiled binary image of this program is located in examples/bin/ sub-directory.
{{{
       WARNING:	the uclient program is a primitive client application and 
       is provided for test-only purposes.  
       It does not implement the re-transmission pattern that is necessary for a
       correct	TURN client implementation. In TURN, the retransmission	burden
       is lying	entirely on the	client application. We provide	the  messaging
       functionality  in the client library, but the client must implement the
       correct Networking IO processing	in the client program code.
}}}
 *	_*peer*_: a simple stateless UDP-only "echo" server, to be used as the final server in relay pattern ("_peer_"). For every incoming UDP packet, it simply echoes it back.  (this program is provided for the testing purposes only !)	When the test clients are communicating in the	client-to-client manner, this component	is not needed. The compiled binary image of this program is located in examples/bin/ subdirectory.
 *	_*stunclient*_: a simple STUN	client example.	 The  compiled	binary image of this program is located in examples/bin/ subdirectory.
 *	_*rfc5769check*_: a utility that checks the correctness of the STUN/TURN protocol implementation. This program will perform several checks and print the result on the screen. It will exit with 0 status if everything is OK, and with (-1) if there was an error in the protocol implementation.   

       In the "examples/scripts"	subdirectory, you will find the	 examples  of  command
       lines to	be used	to run the programs. The scripts are meant to be run from examples/ subdirectory:
{{{
	$ cd examples
	$ ./scripts/secure_relay.sh
}}}

== RUN ==

===turnserver application: a TURN relay server implementation===

====Usage:====
{{{
       $ turnserver [flags] [-n | -c <config-file>] [ --userdb=<userdb-file> | --sql-userdb=<db-conn-string> | --mysql-userdb=<db-conn-string> ] [options]
       $ turnserver -h
}}}

====Flags:====

   * *-v,* *--verbose* Verbose.
   * *-o,* *--daemon* Run server process as daemon.
   * *-f,* *--fingerprint* Use fingerprints in the TURN messages. If an incoming request contains fingerprint, then TURN server will always add fingerprints to the messages in this session, regardless of the per-server setting.
   * *-a,* *--lt-cred-mech* Use long-term credentials mechanism. This option can be used with either flat file user database or PostgreSQL DB or MySQL DB for user keys storage.
   * *-A,* *--st-cred-mech* Use short-term credentials mechanism. This option requires a PostgreSQL or MySQL DB for short term passwords storage.
   * *-z,* *--no-auth* Do not use any credentials mechanism, allow anonymous access. Opposite to *-a* and *-A* options.
   * *--use-auth-secret* Flag that sets a special authorization option that is based upon authentication secret. This feature purpose is to support "TURN Server REST API" as described in TURNServerRESTAPI.pdf in the docs. This option can be used with long-term credentials mechanism only - it does not make much sense with the short-term mechanism. 
   * *--no-udp* Do not start 'plain' UDP listeners.
   * *--no-tcp* Do not start 'plain'TCP listeners.
   * *--no-tls* Do not start TLS listeners.
   * *--no-dtls* Do not start DTLS	listeners.
   * *--no-udp-relay* Do not allow UDP relay endpoints, use only TCP relay option.
   * *--no-tcp-relay* Do not allow TCP relay endpoints, use only UDP relay option.
   * *--stale-nonce* Use extra security with nonce value having limited lifetime (600 secs).
   * *--no-stdout-log* Flag to prevent stdout log messages. By default, all log messages are going to both stdout and to a log file. With this option everything will be going to the log file only (unless the log file itself is stdout).
   * *-h*  Help.

====Config file setting:====

   * *-n*     Do not use configuration file, use only command line parameters.
   * *-c*     Configuration file name (default - turnserver.conf).  The	format of  config  file can be seen in the supplied examples/etc/turnserver.conf example file. Long names of the options are used as the configuration  items names in the file. If not an absolute path is supplied, then the file is searched in the following	directories:
	      *	 current directory
	      *	 current directory etc/	subdirectory
	      *	 upper directory level etc/
	      *	 /etc/
	      *	 /usr/local/etc/
	      
====User database settings:====

   * *-b,* *--userdb*
	      'Dynamic'	user database file name	(default  -  turnuserdb.conf),
			for long-term credentials mechanism only.
	      This  user  database  is	being  dynamically  checked  while the
	      _turnserver_ is working, and the  user  accounts  can  be  changed
	      dynamically by editing the file.
   * *-e,* *--sql-userdb*
   		  User database connection string for PostgreSQL. 
		This database can be used for long-term and short-term credentials mechanisms,
	    and it can store the secret value for secret-based timed authentication in TURN RESP API.
		The connection string format is like that:
{{{
"host=<host> dbname=<dbname> user=<db-user> password=<db-user-password> connect_timeout=30"
}}}
(for 8.x Postgres), or:
{{{
"postgresql://username:password@hostname:port/databasename"
}}}
 (for 9.x Postgres). 
	See the INSTALL file for more explanations and examples.

		Also, see http://www.PostgreSQL.org for full PostgreSQL documentation.
   * *-M,* *--mysql-userdb*
   		  User database connection string for MySQL. 
		This database can be used for long-term and short-term credentials mechanisms,
	    and it can store the secret value for secret-based timed authentication in TURN RESP API.
		The connection string format (for example) is like this:
{{{
"host=<host> dbname=<dbname> user=<db-user> password=<db-user-password>".
}}}
		See the INSTALL file for more explanations and examples.
		
		Also, see http://www.mysql.org for full MySQL documentation.

====Options:====

    *   *-d,* *--listening-device* Listener interface device (optional functionality, Linux only). The turnserver process must have root privileges to bind the	listening endpoint to a device. If turnserver must run as a	process without root privileges, then just do not use this setting.
    *   *-L,* *--listening-ip* Listener IP address of relay server.  Multiple listeners can  be specified.  If no *IP*(s) specified, then all IPv4 and IPv6 system IPs will be used for listening.
    *   *-p,* *--listening-port* TURN listener port for UDP and TCP listeners (Default: 3478).
    *   *--tls-listening-port*   TURN listener port for TLS and DTLS listeners (Default: 5349).
    *   *--alt-listening-port*   Alternative listener port for UDP and TCP listeners. Default value is 3479. This is needed for RFC 5780 support (STUN extension specs, NAT behavior discovery). The TURN Server supports RFC 5780 only if it is started with more than one listening IP address of the same family (IPv4 or IPv6).
    *   *--alt-tls-listening-port*   Alternative listener port for TLS and DTLS listeners (Default: 5350).
    *   *-i,* *--relay-device* Relay interface device for relay sockets (optional, Linux	only).
    *   *-E,* *--relay-ip* Relay  address  (the local IP address that will be used to relay the packets to the _peer_).	Multiple relay addresses may be	 used. If  no  relay  *IP*(s) specified, then all non-loopback system IPs will be used.
    *   *-X,* *--external-ip* "External" TURN Server address if the server is behind NAT. In the server-behind-NAT situation, only one relay address must be used, and that single relay address must be mapped by NAT to the 'external' IP. For this 'external' IP, NAT must forward ports directly (relayed port 12345 must be always mapped to the same 'external' port 12345). This value, if not empty, is returned in XOR-RELAYED-ADDRESS field. By default, this value is empty, and the real relay IP address is used.
    *   *-m,* *--relay-threads* Number of	extra threads to handle	the  established  connections. By  default, everything in handled in single thread (the default number of	extra threads is 0).
    *   *--min-port* Lower bound of the UDP port range	for  relay  endpoints  allocation.  Default value is 49152, according to RFC 5766.
    *   *--max-port* Upper  bound  of	the UDP	port range for relay endpoints allocation.  Default value is 65535, according to RFC 5766.
    *   *-u,* *--user* Long-term credentials user account, in the column-separated form 'username:key'. Multiple user accounts can be used in the command line. The key is either the	user password, or the key is generated by _turnadmin_ command. In the second case, the key  must be  prepended with  '0x'  symbols. The key is calculated over the user name, the realm, and the user password.
    *   *-r,* *--realm* Realm to be used for all users, with long term credentials only.
    *   *-q,* *--user-quota* Per-user allocation quota: how many concurrent allocations a user can create.
    *   *-Q,* *--total-quota* Total allocations quota: global limit on concurrent allocations.
    *   *--static-auth-secret* Static authentication secret value (a string). If not set, then the turn server will try to use the 'dynamic' value in turn_secret table in user database (if present). The database-stored value can be changed on-the-fly by a separate program, so this is why that other mode is 'dynamic'.
    *   *--secret-ts-exp-time* 	Expiration time for timestamp used with authentication secret, in seconds. The default value is 86400 (24 hours). This is 'TTL' in terms of TURNServerRESTAPI.pdf document.
    *	*-s,* *--max-bps* Max bytes-per-second bandwidth a TURN session is allowed to handle (input and output network streams combined). Anything above that limit will be dropped.
    *   *--cert* Certificate file, PEM format. Same file search rules applied  as for the configuration file. If both *--no-tls* and *--no-dtls* options are specified, then this parameter is not needed. Default value is turn_server_cert.pem.
    *   *--pkey* Private key file, PEM format. Same file search rules applied as for the configuration file. If both *--no-tls* and *--no-dtls* options are specified, then this parameter is not needed. Default value is turn_server_pkey.pem.
    *   *-l*, *--log-file* Option to set the log file name. By default, the turnserver tries to open a log file in  /var/log, /var/tmp, /tmp and current directories directories (which open operation succeeds first that file will be used). With this option you can set the definite log file name. The special names are "stdout" and "-" - they will force everything to the stdout.

=== turnadmin application: a TURN relay administration tool===

====Usage:====
{{{
       $ turnadmin [command] [options]
       $ turnadmin [ -h	| --help]
}}}
====Commands:====

 *  *-k,* *--key* Generate key for a long-term credentials mechanism user.
 * *-a,* *--add* Add or update a long-term user.
 * *-A,* *--add-st* Add or update a short-term credentials mechanism user.
 * *-d,* *--delete* Delete a long-term user.
 * *-D,* *--delete-st* Delete a short-term user.

 ====Options:====

 * *-b,* *--userdb* 'Dynamic' user database file name (default - turnuserdb.conf).
 * *-e,* *--sql-userdb* PostgreSQL database connection string.
 * *-M,* *--mysql-userdb* MySQL database connection string.
 * *-u,* *--user*   User name.
 * *-r,* *--realm*    Realm.
 * *-p,* *--password* Password.
 * *-h,* *--help* Help.

====Generate a key:====
{{{
       $ turnadmin -k -u <username> -r <realm> -p <password>
}}}
====Add/update a user (and realm) in the userdb file:====
{{{
       $ turnadmin -a [-b <userdb-file> | -e <db-connection-string> | -M <db-connection-string> ] -u <username>	-r <realm>  -p	<password>
}}}
====Delete a user from the userdb file:====
{{{
       $ turnadmin -d [-b <userdb-file> | -e <db-connection-string> | -M <db-connection-string> ] -u <username>
}}}
====Help:====
{{{
       $ turnadmin -h
}}}

=== uclient application (for test purposes only)===
  It was designed to simulate multiple clients. It uses asynch IO API in  libevent to  handle  multiple  clients. A  client connects to the relay, negotiates the session, and sends	multiple  (configured  number) messages	to  the	 server	 (relay), expecting the	same number of replies. The length of the messages is configurable.   The  message is an arbitrary octet stream, but it	can be configured as a string.  The number of the messages to send is configurable.

====Usage:====
{{{
       $ uclient [-tSvsyhcxg] [options]	<TURN-Server-IP-address>
}}}
====Flags:====

 *      *-t*     Use TCP (default is UDP).
 *      *-T*     TCP relay transport (default - UDP). Implies options -t, -y, -c, and ignores options -s, -e, -r and -g.
 *      *-S*     Secure connection: TLS for TCP, DTLS for UDP.
 *      *-v*     Verbose.
 *      *-s*     Use "Send" method	in TURN; by default, it	uses TURN Channels.
 *      *-y*     Use  client-to-client  connections: RTP/RTCP pair	of channels to another RTP/RTCP pair of channels.  with this  option  the  _peer_ application  is  not used, as the allocated relay endpoints	are talking to each other.
 *      *-h*     Hang on indefinitely after the last sent packet.
 *      *-c*     Do not create rtcp connections.
 *      *-x*     Request IPv6 relayed address (RFC6156).
 *      *-g*     Set DONT_FRAGMENT	parameter in TURN requests.
 *      *-A*     Use short-term credentials mechanism for authentication. By default, the program uses the long-term credentials mechanism if authentication is required.

====Options:====

 *      *-l*     Message length (Default: 100 Bytes).
 *      *-i*     Certificate file (for secure connections only).
 *      *-k*     Private key file (for secure connections only).
 *      *-p*     *TURN* *Server* port (Default: 3478 unsecure,	5349 secure).
 *      *-n*     Number of	messages to send (Default: 5).
 *      *-d*     Local interface device (optional).
 *      *-L*     Local IP address (optional).
 *      *-m*     Number of	clients	(default is 1, 2 or 4,	depending  on  options below).
 *      *-e*     Peer address.
 *      *-r*     Peer port	(default 3480).
 *		*-z*     Per-session packet interval in milliseconds (default is 20 ms).
 *		*-u*     STUN/TURN username.
 *		*-w*     STUN/TURN user password.
 *		*-W*     TURN REST API secret. Is not compatible with -A flag.

       See the _uclient_ usage examples	in the "examples/scripts" directory.

=== peer  application (for test purposes ony) ===
Peer a simple UDP-only echo backend server. This application is used for the test purposes only, as a '_peer_'  for the _uclient_ application.

====Usage:====
{{{
       $ peer [-v] [options]
}}}
====Options:====

 *      *-p*     Listening	UDP port (Default: 3480).
 *      *-d*     Listening	interface device (optional)
 *      *-L*     Listening	address	of _peer_	server. Multiple listening addresses can be used, IPv4 and IPv6. If no listener address(es) defined, then it listens on all IPv4 and IPv6 addresses.
 *      *-v*     Verbose

=== stunclient is a basic STUN client ===
It sends a STUN request and shows the reply information.

====Usage:====
{{{
       $ stunclient [options] <STUN-Server-IP-address>
}}}
====Options:====

 *      *-p*     STUN server port (Default: 3478).
 *      *-L*     Local address to use (optional).

=== rfc5769check tests the correctness of STUN protocol ===
It tests the protocol implementation against the test vectors predefined in RFC 5769 and prints the results of the tests on the screen.   
  
====Usage:====  
{{{
$ examples/bin/rfc5769check
}}}

== LIBRARIES ==

       In the lib/ sub-directory the build process  will  create  TURN	client
       messaging  library.   In	 the  include/	sub-directory,	the  necessary
       include files will be placed. 
       The C++ wrapper for the messaging functionality is located in TurnMsgLib.h header.
       An example of C++ code can be found in stunclient.c file.

== DOCS ==

In the original archive tree, the command:

	$ man -M man turnserver

will give you the man page.

After the proper installation, the command:

	$ man turnserver
	
will give you the same man page.

In the docs/html subdirectory of the original archive tree, you will find the client library 
reference. After the installation, it will be placed in 
PREFIX/share/doc/turnserver/html.
 
== LOGS ==

When the *TURN Server* starts, it makes efforts to create a log file {{{turnserver_<pid>.log}}} 
in the following directories:

	* /var/log
	* /log/
	* /var/tmp
	* /tmp
	* current directory

If all efforts failed (due to the system permission settings) then all 
log messages are sent only to the standard output of the process.

This behavior can be controlled by --sql-log and --no-stdout-log options (see turnserver help).

== CLUSTERS ==

TURN Server can be a part of the cluster installation. But, to support the "even port" functionality 
(RTP/RTCP streams pairs) the client requests from a particular IP must be delivered to the same 
TURN Server instance, so it requires some networking setup massaging for the cluster. The reason is that 
the RTP and RTCP relaying endpoints must be allocated on the same relay IP. It would be possible 
to design a scheme with the application-level requests forwarding (and we may do that later) but 
it would affect the performance.

== FILES ==

/etc/turnserver.conf

/etc/turnuserdb.conf

/usr/local/etc/turnserver.conf

/usr/local/etc/turnuserdb.conf

== STANDARDS ==

new STUN RFC 5389

TURN RFC 5766

TURN-TCP extention RFC 6062
 
TURN IPv6 extention RFC 6156

STUN/TURN test vectors RFC 5769

STUN NAT behavior discovery RFC 5780

== AUTHORS ==

Oleg Moskalenko <mom040267@gmail.com>


							TURN(4 Apr 2013)



